%YAML 1.2
---
!!map {
  !!str 'openapi': !!str '3.0.3',
  !!str 'info':
    !!map {
      !!str 'title': !!str 'Eth Beacon Node API',
      !!str 'description': !!str "API specification for the beacon node, which enables users to query and\nparticipate in Ethereum 2.0 phase 0 beacon chain.\n\n\nAll requests by default send and receive JSON, and as such should have\neither or both of the \"Content-Type: application/json\"\n\nand \"Accept: application/json\" headers.  In addition, some requests can\nreturn data in the SSZ format.  To indicate that SSZ\n\ndata is required in response to a request the header \"Accept:\napplication/octet-stream\" should be sent.  Note that only a subset\n\nof requests can respond with data in SSZ format; these are noted in each\nindividual request.\n\n\nAPI endpoints are individually versioned.  As such, there is no direct\nrelationship between all v1 endpoints, all v2 endpoints,\n\n_etc._ and no such relationship should be inferred.  All JSON responses\nreturn the requested data under a `data` key in the top\n\nlevel of their response.  Additional metadata may or may not be present in\nother keys at the top level of the response, dependent\n\non the endpoint.  The rules that require an increase in version number are\nas follows:\n\n  - no field that is listed in an endpoint shall be removed without an increase in the version number\n  - no field that is listed in an endpoint shall be altered in terms of format (_e.g._ from a string to an array) without an\n    increase in the version number\n\nNote that it is possible for a field to be added to an endpoint's data or\nmetadata without an increase in the version number.\n",
      !!str 'version': !!str 'Dev - Eth2Spec v1.1.0',
      !!str 'contact':
        !!map {
          !!str 'name': !!str 'Ethereum Github',
          !!str 'url': !!str 'https://github.com/ethereum/beacon-apis/issues',
        },
      !!str 'license':
        !!map {
          !!str 'name': !!str 'CC0-1.0',
          !!str 'url': !!str 'https://creativecommons.org/publicdomain/zero/1.0/',
        },
    },
  !!str 'servers':
    !!seq [
      !!map {
        !!str 'url': !!str '{server_url}',
        !!str 'variables':
          !!map {
            !!str 'server_url':
              !!map {
                !!str 'description': !!str 'Beacon node API url',
                !!str 'default': !!str 'http://public-mainnet-node.ethereum.org/',
              },
          },
      },
    ],
  !!str 'tags':
    !!seq [
      !!map {
        !!str 'name': !!str 'Beacon',
        !!str 'description': !!str 'Set of endpoints to query beacon chain.',
      },
      !!map {
        !!str 'name': !!str 'Config',
        !!str 'description': !!str 'Endpoints to query chain configuration, specification, and fork schedules.',
      },
      !!map {
        !!str 'name': !!str 'Debug',
        !!str 'description': !!str "Set of endpoints to debug chain and shouldn't be exposed publicly.",
      },
      !!map {
        !!str 'name': !!str 'Events',
        !!str 'description': !!str 'Set of endpoints to for event subscription.',
      },
      !!map {
        !!str 'name': !!str 'Node',
        !!str 'description': !!str 'Endpoints to query node related informations',
      },
      !!map {
        !!str 'name': !!str 'Validator',
        !!str 'description': !!str 'Endpoints intended for validator clients',
      },
      !!map {
        !!str 'name': !!str 'ValidatorRequiredApi',
        !!str 'description': !!str "Minimal set of endpoints to enable a working validator implementation.\n\n\n[Checkout validator flow](./validator-flow.md) to learn how to use this\napi.\n",
      },
    ],
  !!str 'paths':
    !!map {
      !!str '/eth/v1/beacon/genesis':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getGenesis',
              !!str 'tags': !!seq [!!str 'Beacon', !!str 'ValidatorRequiredApi'],
              !!str 'summary': !!str "Retrieve details of the chain's genesis.",
              !!str 'description': !!str "Retrieve details of the chain's genesis which can be used to identify\nchain.",
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'type': !!str 'object',
                                  !!str 'title': !!str 'GetGenesisResponse',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'genesis_time':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/primitive_GenesisTime',
                                                },
                                              !!str 'genesis_validators_root':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                },
                                              !!str 'genesis_fork_version':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/primitive_ForkVersion',
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Chain genesis info is not yet known',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'Chain genesis info is not yet known',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/root':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateRoot',
              !!str 'summary': !!str 'Get state SSZ HashTreeRoot',
              !!str 'description': !!str "Calculates HashTreeRoot for state with given 'stateId'. If stateId is\nroot, same value will be returned.",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateRootResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'root':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                      },
                                                      !!map {
                                                        !!str 'description': !!str 'HashTreeRoot of BeaconState object',
                                                      },
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state ID',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                    ],
                                },
                              !!str 'example':
                                !!map {
                                  !!str 'code': !!str '404',
                                  !!str 'message': !!str 'State not found',
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/fork':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateFork',
              !!str 'summary': !!str 'Get Fork object for requested state',
              !!str 'description': !!str "Returns\n[Fork](https://github.com/ethereum/consensus-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork)\nobject for state with given 'stateId'.",
              !!str 'tags': !!seq [!!str 'Beacon', !!str 'ValidatorRequiredApi'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateForkResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/misc_Fork',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state ID',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'State not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/finality_checkpoints':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateFinalityCheckpoints',
              !!str 'summary': !!str 'Get state finality checkpoints',
              !!str 'description': !!str "Returns finality checkpoints for state with given 'stateId'.\n\nIn case finality is not yet achieved, checkpoint should return epoch 0\nand ZERO_HASH as root.\n",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateFinalityCheckpointsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'previous_justified':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/misc_Checkpoint',
                                                },
                                              !!str 'current_justified':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/misc_Checkpoint',
                                                },
                                              !!str 'finalized':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/misc_Checkpoint',
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state ID',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'State not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/validators':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateValidators',
              !!str 'summary': !!str 'Get validators from state',
              !!str 'description': !!str "Returns filterable list of validators with their balance, status and\nindex.\n\n\nInformation will be returned for all indices or public key that match\nknown validators.  If an index or public key does not\n\nmatch any known validator, no information will be returned but this will\nnot cause an error.  There are no guarantees for the\n\nreturned data in terms of ordering; both the index and public key are\nreturned for each validator, and can be used to confirm\n\nfor which inputs a response has been returned.\n",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                  !!map {
                    !!str 'name': !!str 'id',
                    !!str 'description': !!str "Either hex encoded public key (any bytes48 with 0x prefix) or\nvalidator index",
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'type': !!str 'array',
                        !!str 'maxItems': !!str '30',
                        !!str 'uniqueItems': !!str 'true',
                        !!str 'items':
                          !!map {
                            !!str 'description': !!str "Either hex encoded public key (any bytes48 with 0x prefix) or\nvalidator index",
                            !!str 'type': !!str 'string',
                          },
                      },
                  },
                  !!map {
                    !!str 'name': !!str 'status',
                    !!str 'description': !!str "[Validator status\nspecification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)",
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'type': !!str 'array',
                        !!str 'uniqueItems': !!str 'true',
                        !!str 'items':
                          !!map {
                            !!str 'allOf':
                              !!seq [
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/api_ValidatorStatus',
                                },
                                !!map {
                                  !!str 'enum':
                                    !!seq [
                                      !!str 'active',
                                      !!str 'pending',
                                      !!str 'exited',
                                      !!str 'withdrawal',
                                    ],
                                },
                              ],
                          },
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateValidatorsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/api_ValidatorResponse',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state or validator ID, or status',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'State not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/validators/{validator_id}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateValidator',
              !!str 'summary': !!str 'Get validator from state by id',
              !!str 'description': !!str "Returns validator specified by state and id or public key along with\nstatus and balance.",
              !!str 'tags': !!seq [!!str 'Beacon', !!str 'ValidatorRequiredApi'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                  !!map {
                    !!str 'name': !!str 'validator_id',
                    !!str 'description': !!str "Either hex encoded public key (any bytes48 with 0x prefix) or\nvalidator index",
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'schema': !!map { !!str 'type': !!str 'string' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateValidatorResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/api_ValidatorResponse',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state or validator ID',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Not Found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                },
                              !!str 'examples':
                                !!map {
                                  !!str 'StateNotFound':
                                    !!map {
                                      !!str 'value':
                                        !!map {
                                          !!str 'code': !!str '404',
                                          !!str 'message': !!str 'State not found',
                                        },
                                    },
                                  !!str 'ValidatorNotFound':
                                    !!map {
                                      !!str 'value':
                                        !!map {
                                          !!str 'code': !!str '404',
                                          !!str 'message': !!str 'Validator not found',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/validator_balances':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateValidatorBalances',
              !!str 'summary': !!str 'Get validator balances from state',
              !!str 'description': !!str "Returns filterable list of validators balances.\n\n\nBalances will be returned for all indices or public key that match known\nvalidators.  If an index or public key does not\n\nmatch any known validator, no balance will be returned but this will not\ncause an error.  There are no guarantees for the\n\nreturned data in terms of ordering; the index and is returned for each\nbalance, and can be used to confirm for which inputs a\n\nresponse has been returned.\n",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                  !!map {
                    !!str 'name': !!str 'id',
                    !!str 'description': !!str "Either hex encoded public key (any bytes48 with 0x prefix) or\nvalidator index",
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'type': !!str 'array',
                        !!str 'maxItems': !!str '30',
                        !!str 'uniqueItems': !!str 'true',
                        !!str 'items':
                          !!map {
                            !!str 'description': !!str "Either hex encoded public key (any bytes48 with 0x prefix) or\nvalidator index",
                            !!str 'type': !!str 'string',
                          },
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateValidatorBalancesResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/api_ValidatorBalanceResponse',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state or validator ID',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/committees':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getEpochCommittees',
              !!str 'summary': !!str 'Get all committees for a state.',
              !!str 'description': !!str 'Retrieves the committees for the given state.',
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                  !!map {
                    !!str 'name': !!str 'epoch',
                    !!str 'description': !!str "Fetch committees for the given epoch.  If not present then the\ncommittees for the epoch of the state will be obtained.",
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'allowEmptyValue': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'allOf':
                          !!seq [
                            !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            !!map { !!str 'example': !!str '' },
                          ],
                      },
                  },
                  !!map {
                    !!str 'name': !!str 'index',
                    !!str 'description': !!str "Restrict returned values to those matching the supplied committee\nindex.",
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'allOf':
                          !!seq [
                            !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            !!map { !!str 'example': !!str '' },
                          ],
                      },
                  },
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'description': !!str 'Restrict returned values to those matching the supplied slot.',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'allOf':
                          !!seq [
                            !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            !!map { !!str 'example': !!str '' },
                          ],
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetEpochCommitteesResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/api_Committee',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state ID, index, epoch, slot, or combination thereof',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Slot does not belong in epoch',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                    ],
                                },
                              !!str 'example':
                                !!map {
                                  !!str 'code': !!str '404',
                                  !!str 'message': !!str 'State not found',
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/states/{state_id}/sync_committees':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getEpochSyncCommittees',
              !!str 'summary': !!str 'Get sync committees for a state.',
              !!str 'description': !!str 'Retrieves the sync committees for the given state.',
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                  !!map {
                    !!str 'name': !!str 'epoch',
                    !!str 'description': !!str "Fetch sync committees for the given epoch.  If not present then the\nsync committees for the epoch of the state will be obtained.",
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'allowEmptyValue': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'allOf':
                          !!seq [
                            !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            !!map { !!str 'example': !!str '' },
                          ],
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetEpochSyncCommitteesResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/SyncCommitteeByValidatorIndices',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state ID or epoch',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Epoch is outside the sync committee period of the state',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                    ],
                                },
                              !!str 'example':
                                !!map {
                                  !!str 'code': !!str '404',
                                  !!str 'message': !!str 'State not found',
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/headers':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getBlockHeaders',
              !!str 'summary': !!str 'Get block headers',
              !!str 'description': !!str "Retrieves block headers matching given query. By default it will fetch\ncurrent head slot blocks.",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'allOf':
                          !!seq [
                            !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            !!map { !!str 'example': !!str '' },
                          ],
                      },
                  },
                  !!map {
                    !!str 'name': !!str 'parent_root',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'allOf':
                          !!seq [
                            !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            !!map { !!str 'example': !!str '' },
                          ],
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetBlockHeadersResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str 'type': !!str 'object',
                                              !!str 'properties':
                                                !!map {
                                                  !!str 'root':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                    },
                                                  !!str 'canonical':
                                                    !!map { !!str 'type': !!str 'boolean' },
                                                  !!str 'header':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlockHeader',
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The block ID supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid block ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/headers/{block_id}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getBlockHeader',
              !!str 'summary': !!str 'Get block header',
              !!str 'description': !!str 'Retrieves block header for given block id.',
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'block_id',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str '$ref': !!str '#/components/parameters/index_BlockId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetBlockHeaderResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'root':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                },
                                              !!str 'canonical':
                                                !!map { !!str 'type': !!str 'boolean' },
                                              !!str 'header':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlockHeader',
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The block ID supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid block ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Block not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'Block not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/blinded_blocks':
        !!map {
          !!str 'post':
            !!map {
              !!str 'tags': !!seq [!!str 'Beacon', !!str 'ValidatorRequiredApi'],
              !!str 'summary': !!str 'Publish a signed block.',
              !!str 'operationId': !!str 'publishBlindedBlock',
              !!str 'description': !!str "Instructs the beacon node to use the components of the\n`SignedBlindedBeaconBlock` to construct and publish a \n\n`SignedBeaconBlock` by swapping out the `transactions_root` for the\ncorresponding full list of `transactions`.\n\nThe beacon node should broadcast a newly constructed `SignedBeaconBlock`\nto the beacon network,\n\nto be included in the beacon chain. The beacon node is not required to\nvalidate the signed\n\n`BeaconBlock`, and a successful response (20X) only indicates that the\nbroadcast has been\n\nsuccessful. The beacon node is expected to integrate the new block into\nits state, and\n\ntherefore validate the block internally, however blocks which fail the\nvalidation are still\n\nbroadcast but a different status code is returned (202). Pre-Bellatrix,\nthis endpoint will accept \n\na `SignedBeaconBlock`.\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'in': !!str 'header',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/ConsensusVersion' },
                    !!str 'required': !!str 'false',
                    !!str 'name': !!str 'Eth-Consensus-Version',
                    !!str 'description': !!str 'Version of the block being submitted, if using SSZ encoding.',
                  },
                ],
              !!str 'requestBody':
                !!map {
                  !!str 'description': !!str "The `SignedBlindedBeaconBlock` object composed of `BlindedBeaconBlock`\nobject (produced by beacon node) and validator signature.",
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'oneOf':
                                !!seq [
                                  !!map {
                                    !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlock',
                                  },
                                  !!map {
                                    !!str '$ref': !!str '#/components/schemas/Altair-SignedBeaconBlock',
                                  },
                                  !!map {
                                    !!str '$ref': !!str '#/components/schemas/SignedBlindedBeaconBlock',
                                  },
                                ],
                            },
                        },
                      !!str 'application/octet-stream':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'description': !!str "SSZ serialized block bytes. Use content type header to indicate\nthat SSZ data is contained in the request body.",
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str "The block was validated successfully and has been broadcast. It has\nalso been integrated into the beacon node's database.",
                    },
                  !!str '202':
                    !!map {
                      !!str 'description': !!str "The block failed validation, but was successfully broadcast anyway.\nIt was not integrated into the beacon node's database.",
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The `SignedBlindedBeaconBlock` object is invalid',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid block: missing signature',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v2/beacon/blocks/{block_id}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getBlockV2',
              !!str 'summary': !!str 'Get block',
              !!str 'description': !!str "Retrieves block details for given block id.\n\nDepending on `Accept` header it can be returned either as json or as\nbytes serialized by SSZ\n",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'block_id',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str '$ref': !!str '#/components/parameters/index_BlockId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Successful response',
                      !!str 'headers':
                        !!map {
                          !!str 'Eth-Consensus-Version':
                            !!map {
                              !!str '$ref': !!str '#/components/headers/Eth-Consensus-Version',
                            },
                        },
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetBlockV2Response',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'version':
                                        !!map {
                                          !!str 'type': !!str 'string',
                                          !!str 'enum':
                                            !!seq [
                                              !!str 'phase0',
                                              !!str 'altair',
                                              !!str 'bellatrix',
                                            ],
                                          !!str 'example': !!str 'phase0',
                                        },
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'oneOf':
                                            !!seq [
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlock',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Altair-SignedBeaconBlock',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Bellatrix-SignedBeaconBlock',
                                              },
                                            ],
                                        },
                                    },
                                },
                            },
                          !!str 'application/octet-stream':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'description': !!str "SSZ serialized block bytes. Use Accept header to choose this\nresponse type",
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The block ID supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid block ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Block not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'Block not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/blocks/{block_id}/root':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getBlockRoot',
              !!str 'summary': !!str 'Get block root',
              !!str 'description': !!str 'Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader',
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'block_id',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'example': !!str 'head',
                    !!str 'schema': !!map { !!str 'type': !!str 'string' },
                    !!str 'description': !!str "Block identifier.\n\nCan be one of: \"head\" (canonical head in node's view), \"genesis\",\n\"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n",
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'type': !!str 'object',
                                  !!str 'title': !!str 'GetBlockRootResponse',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'root':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str 'description': !!str "HashTreeRoot of BeaconBlock/BeaconBlockHeader\nobject",
                                                      },
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                      },
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The block ID supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid block ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Block not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'Block not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/blocks/{block_id}/attestations':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getBlockAttestations',
              !!str 'summary': !!str 'Get block attestations',
              !!str 'description': !!str 'Retrieves attestation included in requested block.',
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'block_id',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str '$ref': !!str '#/components/parameters/index_BlockId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetBlockAttestationsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The block ID supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid block ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Block not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'Block not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/pool/attestations':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPoolAttestations',
              !!str 'summary': !!str 'Get Attestations from operations pool',
              !!str 'description': !!str "Retrieves attestations known by the node but not necessarily\nincorporated into any block",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'committee_index',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                ],
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Successful response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPoolAttestationsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The slot or committee index could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid slot: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'submitPoolAttestations',
              !!str 'summary': !!str 'Submit Attestation objects to node',
              !!str 'description': !!str "Submits Attestation objects to the node.  Each attestation in the\nrequest body is processed individually.\n\n\nIf an attestation is validated successfully the node MUST publish that\nattestation on the appropriate subnet.\n\n\nIf one or more attestations fail validation the node MUST return a 400\nerror with details of which attestations have failed, and why.\n",
              !!str 'tags': !!seq [!!str 'Beacon', !!str 'ValidatorRequiredApi'],
              !!str 'requestBody':
                !!map {
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Attestations are stored in pool and broadcast on appropriate subnet',
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Errors with one or more attestations',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/http_IndexedErrorMessage',
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/pool/attester_slashings':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPoolAttesterSlashings',
              !!str 'summary': !!str 'Get AttesterSlashings from operations pool',
              !!str 'description': !!str "Retrieves attester slashings known by the node but not necessarily\nincorporated into any block",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Successful response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPoolAttesterSlashingsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/attester_slashing_AttesterSlashing',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'submitPoolAttesterSlashings',
              !!str 'summary': !!str "Submit AttesterSlashing object to node's pool",
              !!str 'description': !!str "Submits AttesterSlashing object to node's pool and if passes validation\nnode MUST broadcast it to network.",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'requestBody':
                !!map {
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str '$ref': !!str '#/components/schemas/attester_slashing_AttesterSlashing',
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200': !!map { !!str 'description': !!str 'Success' },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid attester slashing',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str "Invalid attester slashing, it will never pass validation\nso it's rejected",
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/pool/proposer_slashings':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPoolProposerSlashings',
              !!str 'summary': !!str 'Get ProposerSlashings from operations pool',
              !!str 'description': !!str "Retrieves proposer slashings known by the node but not necessarily\nincorporated into any block",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Successful response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPoolProposerSlashingsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/proposer_slashing_ProposerSlashing',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'submitPoolProposerSlashings',
              !!str 'summary': !!str "Submit ProposerSlashing object to node's pool",
              !!str 'description': !!str "Submits ProposerSlashing object to node's pool and if passes validation \nnode MUST broadcast it to network.",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'requestBody':
                !!map {
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str '$ref': !!str '#/components/schemas/proposer_slashing_ProposerSlashing',
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200': !!map { !!str 'description': !!str 'Success' },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid proposer slashing',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str "Invalid proposer slashing, it will never pass validation\nso it's rejected",
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/pool/sync_committees':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'submitPoolSyncCommitteeSignatures',
              !!str 'summary': !!str 'Submit sync committee signatures to node',
              !!str 'description': !!str "Submits sync committee signature objects to the node.\n\n\nSync committee signatures are not present in phase0, but are required\nfor Altair networks.\n\n\nIf a sync committee signature is validated successfully the node MUST\npublish that sync committee signature on all applicable subnets.\n\n\nIf one or more sync committee signatures fail validation the node MUST\nreturn a 400 error with details of which sync committee signatures have\nfailed, and why.\n",
              !!str 'tags': !!seq [!!str 'Beacon', !!str 'ValidatorRequiredApi'],
              !!str 'requestBody':
                !!map {
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/SyncCommitteeSignature',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str "Sync committee signatures are stored in pool and broadcast on\nappropriate subnet",
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Errors with one or more sync committee signatures',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/http_IndexedErrorMessage',
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/beacon/pool/voluntary_exits':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPoolVoluntaryExits',
              !!str 'summary': !!str 'Get SignedVoluntaryExit from operations pool',
              !!str 'description': !!str "Retrieves voluntary exits known by the node but not necessarily\nincorporated into any block",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Successful response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPoolVoluntaryExitsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/voluntary_exit_SignedVoluntaryExit',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'submitPoolVoluntaryExit',
              !!str 'summary': !!str "Submit SignedVoluntaryExit object to node's pool",
              !!str 'description': !!str "Submits SignedVoluntaryExit object to node's pool and if passes\nvalidation node MUST broadcast it to network.",
              !!str 'tags': !!seq [!!str 'Beacon'],
              !!str 'requestBody':
                !!map {
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str '$ref': !!str '#/components/schemas/voluntary_exit_SignedVoluntaryExit',
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Voluntary exit is stored in node and broadcasted to network',
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid voluntary exit',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str "Invalid voluntary exit, it will never pass validation so\nit's rejected",
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v2/debug/beacon/states/{state_id}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getStateV2',
              !!str 'summary': !!str 'Get full BeaconState object',
              !!str 'description': !!str "Returns full BeaconState object for given stateId.\n\nDepending on `Accept` header it can be returned either as json or as\nbytes serialized by SSZ\n",
              !!str 'tags': !!seq [!!str 'Debug'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state_id',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str '$ref': !!str '#/components/parameters/index_StateId',
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'headers':
                        !!map {
                          !!str 'Eth-Consensus-Version':
                            !!map {
                              !!str '$ref': !!str '#/components/headers/Eth-Consensus-Version',
                            },
                        },
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetStateV2Response',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'version':
                                        !!map {
                                          !!str 'type': !!str 'string',
                                          !!str 'enum':
                                            !!seq [
                                              !!str 'phase0',
                                              !!str 'altair',
                                              !!str 'bellatrix',
                                            ],
                                          !!str 'example': !!str 'phase0',
                                        },
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'oneOf':
                                            !!seq [
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/state_BeaconState',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Altair-BeaconState',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Bellatrix-BeaconState',
                                              },
                                            ],
                                        },
                                    },
                                },
                            },
                          !!str 'application/octet-stream':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'description': !!str "SSZ serialized state bytes. Use Accept header to choose this\nresponse type",
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid state ID',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid state ID: current',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'State not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'State not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/debug/beacon/heads':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getDebugChainHeads',
              !!str 'summary': !!str 'Get fork choice leaves',
              !!str 'description': !!str 'Retrieves all possible chain heads (leaves of fork choice tree).',
              !!str 'deprecated': !!str 'true',
              !!str 'tags': !!seq [!!str 'Debug'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetDebugChainHeadsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str 'type': !!str 'object',
                                              !!str 'properties':
                                                !!map {
                                                  !!str 'root':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                    },
                                                  !!str 'slot':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v2/debug/beacon/heads':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getDebugChainHeadsV2',
              !!str 'summary': !!str 'Get fork choice leaves',
              !!str 'description': !!str 'Retrieves all possible chain heads (leaves of fork choice tree).',
              !!str 'tags': !!seq [!!str 'Debug'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetDebugChainHeadsResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str 'type': !!str 'object',
                                              !!str 'properties':
                                                !!map {
                                                  !!str 'root':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/primitive_Root',
                                                    },
                                                  !!str 'slot':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                    },
                                                  !!str 'execution_optimistic':
                                                    !!map {
                                                      !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/identity':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getNetworkIdentity',
              !!str 'tags': !!seq [!!str 'Node'],
              !!str 'summary': !!str 'Get node network identity',
              !!str 'description': !!str "Retrieves data about the node's network presence",
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetNetworkIdentityResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/p2p_NetworkIdentity',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/peers':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPeers',
              !!str 'tags': !!seq [!!str 'Node'],
              !!str 'summary': !!str 'Get node network peers',
              !!str 'description': !!str "Retrieves data about the node's network peers. By default this returns\nall peers. Multiple query params are combined using AND conditions",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'state',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'type': !!str 'array',
                        !!str 'uniqueItems': !!str 'true',
                        !!str 'items':
                          !!map {
                            !!str '$ref': !!str '#/components/schemas/p2p_PeerConnectionState',
                          },
                      },
                  },
                  !!map {
                    !!str 'name': !!str 'direction',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'schema':
                      !!map {
                        !!str 'type': !!str 'array',
                        !!str 'uniqueItems': !!str 'true',
                        !!str 'items':
                          !!map {
                            !!str '$ref': !!str '#/components/schemas/p2p_PeerConnectionDirection',
                          },
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPeersResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/p2p_Peer',
                                            },
                                        },
                                      !!str 'meta':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'count':
                                                !!map {
                                                  !!str 'description': !!str 'Total number of items',
                                                  !!str 'type': !!str 'number',
                                                  !!str 'example': !!str '1',
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/peers/{peer_id}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPeer',
              !!str 'tags': !!seq [!!str 'Node'],
              !!str 'summary': !!str 'Get peer',
              !!str 'description': !!str 'Retrieves data about the given peer',
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'peer_id',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'schema': !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerId' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPeerResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/p2p_Peer',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The peer ID supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid peer ID: localhost',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '404':
                    !!map {
                      !!str 'description': !!str 'Peer not found',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '404',
                                            !!str 'message': !!str 'Peer not found',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/peer_count':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getPeerCount',
              !!str 'tags': !!seq [!!str 'Node'],
              !!str 'summary': !!str 'Get peer count',
              !!str 'description': !!str 'Retrieves number of known peers.',
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetPeerCountResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'disconnected':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                      !!map { !!str 'example': !!str '12' },
                                                    ],
                                                },
                                              !!str 'connecting':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                      !!map { !!str 'example': !!str '34' },
                                                    ],
                                                },
                                              !!str 'connected':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                      !!map { !!str 'example': !!str '56' },
                                                    ],
                                                },
                                              !!str 'disconnecting':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                      !!map { !!str 'example': !!str '5' },
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/version':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getNodeVersion',
              !!str 'tags': !!seq [!!str 'Node'],
              !!str 'summary': !!str 'Get version string of the running beacon node.',
              !!str 'description': !!str "Requests that the beacon node identify information about its\nimplementation in a format similar to a  [HTTP\nUser-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.",
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetVersionResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'version':
                                                !!map {
                                                  !!str '$ref': !!str '#/components/schemas/primitive_Version',
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/syncing':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getSyncingStatus',
              !!str 'tags': !!seq [!!str 'Node', !!str 'ValidatorRequiredApi'],
              !!str 'summary': !!str 'Get node syncing status',
              !!str 'description': !!str "Requests the beacon node to describe if it's currently syncing or not,\nand if it is, what block it is up to.",
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Request successful',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetSyncingStatusResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'head_slot':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str 'description': !!str 'Head slot node is trying to reach',
                                                      },
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                    ],
                                                },
                                              !!str 'sync_distance':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str 'description': !!str "How many slots node needs to process to reach\nhead. 0 if synced.",
                                                      },
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                    ],
                                                },
                                              !!str 'is_syncing':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map { !!str 'type': !!str 'boolean' },
                                                      !!map {
                                                        !!str 'description': !!str "Set to true if the node is syncing, false if the\nnode is synced.",
                                                      },
                                                    ],
                                                },
                                              !!str 'is_optimistic':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map { !!str 'type': !!str 'boolean' },
                                                      !!map {
                                                        !!str 'description': !!str "Set to true if the node is optimistically tracking\nhead.",
                                                      },
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/node/health':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getHealth',
              !!str 'tags': !!seq [!!str 'Node'],
              !!str 'summary': !!str 'Get health check',
              !!str 'description': !!str "Returns node health status in http status codes. Useful for load\nbalancers.",
              !!str 'responses':
                !!map {
                  !!str '200': !!map { !!str 'description': !!str 'Node is ready' },
                  !!str '206':
                    !!map {
                      !!str 'description': !!str 'Node is syncing but can serve incomplete data',
                    },
                  !!str '503':
                    !!map { !!str 'description': !!str 'Node not initialized or having issues' },
                },
            },
        },
      !!str '/eth/v1/config/fork_schedule':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getForkSchedule',
              !!str 'summary': !!str 'Get scheduled upcoming forks.',
              !!str 'description': !!str "Retrieve all forks, past present and future, of which this node is\naware.",
              !!str 'tags': !!seq [!!str 'Config'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetForkScheduleResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/misc_Fork',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/config/spec':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getSpec',
              !!str 'summary': !!str 'Get spec params.',
              !!str 'description': !!str "Retrieve specification configuration used on this node.  The\nconfiguration should include:\n  - Constants for all hard forks known by the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#constants) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/specs/altair/beacon-chain.md#constants) values\n  - Presets for all hard forks supplied to the beacon node, for example the [phase 0](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/phase0.yaml) and [altair](https://github.com/ethereum/consensus-specs/blob/dev/presets/mainnet/altair.yaml) values\n  - Configuration for the beacon node, for example the [mainnet](https://github.com/ethereum/consensus-specs/blob/dev/configs/mainnet.yaml) values\n\nValues are returned with following format:\n  - any value starting with 0x in the spec is returned as a hex string\n  - numeric values are returned as a quoted integer\n",
              !!str 'tags': !!seq [!!str 'Config', !!str 'ValidatorRequiredApi'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetSpecResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'description': !!str "Key value mapping of all constants, presets and\nconfiguration values for all known hard forks\n\nValues are returned with following format:\n  - any value starting with 0x in the spec is returned as a hex string\n  - numeric values are returned as a quoted integer\n",
                                          !!str 'type': !!str 'object',
                                        },
                                    },
                                  !!str 'example':
                                    !!map {
                                      !!str 'DEPOSIT_CONTRACT_ADDRESS': !!str '0x00000000219ab540356cBB839Cbe05303d7705Fa',
                                      !!str 'DEPOSIT_NETWORK_ID': !!str '1',
                                      !!str 'DOMAIN_AGGREGATE_AND_PROOF': !!str '0x06000000',
                                      !!str 'INACTIVITY_PENALTY_QUOTIENT': !!str '67108864',
                                      !!str 'INACTIVITY_PENALTY_QUOTIENT_ALTAIR': !!str '50331648',
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/config/deposit_contract':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getDepositContract',
              !!str 'summary': !!str 'Get deposit contract address.',
              !!str 'description': !!str 'Retrieve Eth1 deposit contract address and chain ID.',
              !!str 'tags': !!seq [!!str 'Config'],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetDepositContractResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'object',
                                          !!str 'properties':
                                            !!map {
                                              !!str 'chain_id':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                                      },
                                                      !!map {
                                                        !!str 'description': !!str 'Id of Eth1 chain on which contract is deployed.',
                                                      },
                                                      !!map { !!str 'example': !!str '1' },
                                                    ],
                                                },
                                              !!str 'address':
                                                !!map {
                                                  !!str 'allOf':
                                                    !!seq [
                                                      !!map {
                                                        !!str '$ref': !!str '#/components/schemas/primitive_Hex',
                                                      },
                                                      !!map {
                                                        !!str 'description': !!str "Hex encoded deposit contract address with 0x\nprefix",
                                                      },
                                                      !!map {
                                                        !!str 'example': !!str '0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6',
                                                      },
                                                    ],
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/validator/duties/attester/{epoch}':
        !!map {
          !!str 'post':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'summary': !!str 'Get attester duties',
              !!str 'operationId': !!str 'getAttesterDuties',
              !!str 'description': !!str "Requests the beacon node to provide a set of attestation duties, which\nshould be performed by validators, for a particular epoch.\n\nDuties should only need to be checked once per epoch, however a chain\nreorganization (of > MIN_SEED_LOOKAHEAD epochs) could occur, resulting\nin a change of duties. For full safety, you should monitor head events\nand confirm the dependent root in this response matches:\n\n- event.previous_duty_dependent_root when\n`compute_epoch_at_slot(event.slot) == epoch`\n\n- event.current_duty_dependent_root when\n`compute_epoch_at_slot(event.slot) + 1 == epoch`\n\n- event.block otherwise\n\n\nThe dependent_root value is `get_block_root_at_slot(state,\ncompute_start_slot_at_epoch(epoch - 1) - 1)` or the genesis block root\nin the case of underflow.",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'epoch',
                    !!str 'description': !!str 'Should only be allowed 1 epoch ahead',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                ],
              !!str 'requestBody':
                !!map {
                  !!str 'description': !!str 'An array of the validator indices for which to obtain the duties.',
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'title': !!str 'GetAttesterDutiesBody',
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                  !!str 'minItems': !!str '1',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetAttesterDutiesResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'dependent_root':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_DependentRoot',
                                        },
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/validator_AttesterDuty',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid epoch or index',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid epoch: -2',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/duties/proposer/{epoch}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'summary': !!str 'Get block proposers duties',
              !!str 'operationId': !!str 'getProposerDuties',
              !!str 'description': !!str "Request beacon node to provide all validators that are scheduled to\npropose a block in the given epoch.\n\nDuties should only need to be checked once per epoch, however a chain\nreorganization could occur that results in a change of duties. For full\nsafety, you should monitor head events and confirm the dependent root in\nthis response matches:\n\n- event.current_duty_dependent_root when\n`compute_epoch_at_slot(event.slot) == epoch`\n\n- event.block otherwise\n\n\nThe dependent_root value is `get_block_root_at_slot(state,\ncompute_start_slot_at_epoch(epoch) - 1)` or the genesis block root in\nthe case of underflow.",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'epoch',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetProposerDutiesResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'dependent_root':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_DependentRoot',
                                        },
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/validator_ProposerDuty',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid epoch',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid epoch: -2',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/duties/sync/{epoch}':
        !!map {
          !!str 'post':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'summary': !!str 'Get sync committee duties',
              !!str 'operationId': !!str 'getSyncCommitteeDuties',
              !!str 'description': !!str "Requests the beacon node to provide a set of sync committee duties for a\nparticular epoch.",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'epoch',
                    !!str 'description': !!str "epoch // EPOCHS_PER_SYNC_COMMITTEE_PERIOD <= current_epoch //\nEPOCHS_PER_SYNC_COMMITTEE_PERIOD + 1",
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                ],
              !!str 'requestBody':
                !!map {
                  !!str 'description': !!str 'An array of the validator indices for which to obtain the duties.',
                  !!str 'required': !!str 'true',
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'title': !!str 'GetSyncCommitteeDutiesBody',
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                  !!str 'minItems': !!str '1',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetSyncCommitteeDutiesResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'execution_optimistic':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionOptimistic',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'type': !!str 'array',
                                          !!str 'items':
                                            !!map {
                                              !!str '$ref': !!str '#/components/schemas/SyncDuty',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid epoch or index',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid epoch: -2',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/blocks/{slot}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'operationId': !!str 'produceBlock',
              !!str 'deprecated': !!str 'true',
              !!str 'summary': !!str 'Produce a new block, without signature.',
              !!str 'description': !!str "Requests a beacon node to produce a valid block, which can then be\nsigned by a validator.\n\n\n__NOTE__: Supports only phase0 blocks.\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'The slot for which the block should be proposed.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'randao_reveal',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str "The validator's randao reveal value.",
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                  },
                  !!map {
                    !!str 'name': !!str 'graffiti',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'description': !!str 'Arbitrary data validator wants to include in block.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Graffiti' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'ProduceBlockResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/block_BeaconBlock',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid block production request',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                },
                              !!str 'examples':
                                !!map {
                                  !!str 'InvalidRequest':
                                    !!map {
                                      !!str 'value':
                                        !!map {
                                          !!str 'code': !!str '400',
                                          !!str 'message': !!str 'Invalid request to produce a block',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v2/validator/blocks/{slot}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'operationId': !!str 'produceBlockV2',
              !!str 'summary': !!str 'Produce a new block, without signature.',
              !!str 'description': !!str "Requests a beacon node to produce a valid block, which can then be\nsigned by a validator.\n\n\nMetadata in the response indicates the type of block produced, and the\nsupported types of block\n\nwill be added to as forks progress.\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'The slot for which the block should be proposed.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'randao_reveal',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str "The validator's randao reveal value.",
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                  },
                  !!map {
                    !!str 'name': !!str 'graffiti',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'description': !!str 'Arbitrary data validator wants to include in block.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Graffiti' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'headers':
                        !!map {
                          !!str 'Eth-Consensus-Version':
                            !!map {
                              !!str '$ref': !!str '#/components/headers/Eth-Consensus-Version',
                            },
                        },
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'ProduceBlockV2Response',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'version':
                                        !!map {
                                          !!str 'type': !!str 'string',
                                          !!str 'enum':
                                            !!seq [
                                              !!str 'phase0',
                                              !!str 'altair',
                                              !!str 'bellatrix',
                                            ],
                                          !!str 'example': !!str 'phase0',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'oneOf':
                                            !!seq [
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/block_BeaconBlock',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Altair-BeaconBlock',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Bellatrix-BeaconBlock',
                                              },
                                            ],
                                        },
                                    },
                                },
                            },
                          !!str 'application/octet-stream':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'description': !!str "SSZ serialized block bytes. Use Accept header to choose this\nresponse type, version string is sent in header\n`Eth-Consensus-Version`.",
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid block production request',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                },
                              !!str 'examples':
                                !!map {
                                  !!str 'InvalidRequest':
                                    !!map {
                                      !!str 'value':
                                        !!map {
                                          !!str 'code': !!str '400',
                                          !!str 'message': !!str 'Invalid request to produce a block',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/blinded_blocks/{slot}':
        !!map {
          !!str 'get':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'operationId': !!str 'produceBlindedBlock',
              !!str 'summary': !!str 'Produce a new blinded block, without signature.',
              !!str 'description': !!str "Requests a beacon node to produce a valid blinded block, which can then\nbe signed by a validator. \n\nA blinded block is a block with only a transactions root, rather than a\nfull transactions list.\n\n\nMetadata in the response indicates the type of block produced, and the\nsupported types of block\n\nwill be added to as forks progress.\n\n\nPre-Bellatrix, this endpoint will return a `BeaconBlock`.\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'path',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'The slot for which the block should be proposed.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'randao_reveal',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str "The validator's randao reveal value.",
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                  },
                  !!map {
                    !!str 'name': !!str 'graffiti',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'false',
                    !!str 'description': !!str 'Arbitrary data validator wants to include in block.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Graffiti' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'headers':
                        !!map {
                          !!str 'Eth-Consensus-Version':
                            !!map {
                              !!str '$ref': !!str '#/components/headers/Eth-Consensus-Version',
                            },
                        },
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'ProduceBlindedBlockResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'version':
                                        !!map {
                                          !!str 'type': !!str 'string',
                                          !!str 'enum':
                                            !!seq [
                                              !!str 'phase0',
                                              !!str 'altair',
                                              !!str 'bellatrix',
                                            ],
                                          !!str 'example': !!str 'bellatrix',
                                        },
                                      !!str 'data':
                                        !!map {
                                          !!str 'oneOf':
                                            !!seq [
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/block_BeaconBlock',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/Altair-BeaconBlock',
                                              },
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/BlindedBeaconBlock',
                                              },
                                            ],
                                        },
                                    },
                                },
                            },
                          !!str 'application/octet-stream':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'description': !!str "SSZ serialized block bytes. Use Accept header to choose this\nresponse type, version string is sent in header\n`Eth-Consensus-Version`.",
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'Invalid block production request',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                },
                              !!str 'examples':
                                !!map {
                                  !!str 'InvalidRequest':
                                    !!map {
                                      !!str 'value':
                                        !!map {
                                          !!str 'code': !!str '400',
                                          !!str 'message': !!str 'Invalid request to produce a block',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/attestation_data':
        !!map {
          !!str 'get':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'operationId': !!str 'produceAttestationData',
              !!str 'summary': !!str 'Produce an attestation data',
              !!str 'description': !!str "Requests that the beacon node produce an AttestationData.\n\n\nA 503 error must be returned if the block identified by the response\n\n`beacon_block_root` is optimistic (i.e. the attestation attests to a\nblock\n\nthat has not been fully verified by an execution engine).\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'The slot for which an attestation data should be created.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'committee_index',
                    !!str 'in': !!str 'query',
                    !!str 'description': !!str 'The committee index for which an attestation data should be created.',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'ProduceAttestationDataResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/attestation_AttestationData',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/aggregate_attestation':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'getAggregatedAttestation',
              !!str 'summary': !!str 'Get aggregated attestation',
              !!str 'description': !!str "Aggregates all attestations matching given attestation data root and\nslot.\n\n\nA 503 error must be returned if the block identified by the response\n\n`beacon_block_root` is optimistic (i.e. the aggregated attestation\nattests\n\nto a block that has not been fully verified by an execution engine).\n",
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'attestation_data_root',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'HashTreeRoot of AttestationData that validator wants aggregated',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  },
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str "Returns aggregated `Attestation` object with same `AttestationData`\nroot.",
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'GetAggregatedAttestationResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '404': !!map { !!str '$ref': !!str '#/components/responses/http_NotFound' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/validator/aggregate_and_proofs':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'publishAggregateAndProofs',
              !!str 'summary': !!str 'Publish multiple aggregate and proofs',
              !!str 'description': !!str "Verifies given aggregate and proofs and publishes them on appropriate\ngossipsub topic.",
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'requestBody':
                !!map {
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/validator_SignedAggregateAndProof',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200': !!map { !!str 'description': !!str 'Successful response' },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/validator/beacon_committee_subscriptions':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'prepareBeaconCommitteeSubnet',
              !!str 'summary': !!str 'Signal beacon node to prepare for a committee subnet',
              !!str 'description': !!str "After beacon node receives this request,\nsearch using discv5 for peers related to this subnet\nand replace current peers with those ones if necessary\nIf validator `is_aggregator`, beacon node must:\n- announce subnet topic subscription on gossipsub\n- aggregate attestations received on that subnet\n",
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'requestBody':
                !!map {
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'title': !!str 'SubscribeToBeaconCommitteeSubnetRequestBody',
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'validator_index':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                        },
                                      !!str 'committee_index':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                        },
                                      !!str 'committees_at_slot':
                                        !!map {
                                          !!str 'allOf':
                                            !!seq [
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                              },
                                              !!map {
                                                !!str 'description': !!str 'Number of committees at the returned slot',
                                              },
                                            ],
                                        },
                                      !!str 'slot':
                                        !!map {
                                          !!str 'allOf':
                                            !!seq [
                                              !!map {
                                                !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                              },
                                              !!map {
                                                !!str 'description': !!str "Should be slot at which validator is assigned to\nattest",
                                              },
                                            ],
                                        },
                                      !!str 'is_aggregator':
                                        !!map {
                                          !!str 'type': !!str 'boolean',
                                          !!str 'description': !!str "Signals to BN that a validator on the VC has been chosen\nfor aggregator role.",
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str "Slot signature is valid and beacon node has prepared the attestation\nsubnet.\n\n\nNote that we cannot be certain the Beacon node will find peers for\nthat subnet for various reasons.\n",
                    },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/sync_committee_subscriptions':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'prepareSyncCommitteeSubnets',
              !!str 'summary': !!str 'Subscribe to sync committee subnets',
              !!str 'description': !!str "Subscribe to a number of sync committee subnets\n\n\nSync committees are not present in phase0, but are required for Altair\nnetworks.\n\n\nSubscribing to sync committee subnets is an action performed by VC to\nenable network participation in Altair networks, and only required if\nthe VC has an active validator in an active sync committee.\n",
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'requestBody':
                !!map {
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/SyncCommitteeSubscription',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200': !!map { !!str 'description': !!str 'Successful response' },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/validator/sync_committee_contribution':
        !!map {
          !!str 'get':
            !!map {
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'operationId': !!str 'produceSyncCommitteeContribution',
              !!str 'summary': !!str 'Produce a sync committee contribution',
              !!str 'description': !!str "Requests that the beacon node produce a sync committee contribution.\n\n\nA 503 error must be returned if the block identified by the response\n\n`beacon_block_root` is optimistic (i.e. the sync committee contribution\n\nrefers to a block that has not been fully verified by an execution\nengine).\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'slot',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'The slot for which a sync committee contribution should be created.',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'subcommittee_index',
                    !!str 'in': !!str 'query',
                    !!str 'description': !!str 'the subcommittee index for which to produce the contribution.',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  },
                  !!map {
                    !!str 'name': !!str 'beacon_block_root',
                    !!str 'in': !!str 'query',
                    !!str 'description': !!str 'the block root for which to produce the contribution.',
                    !!str 'required': !!str 'true',
                    !!str 'schema':
                      !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Success response',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'title': !!str 'produceSyncCommitteeContributionResponse',
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'data':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/SyncCommitteeContribution',
                                        },
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '404': !!map { !!str '$ref': !!str '#/components/responses/http_NotFound' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                  !!str '503':
                    !!map { !!str '$ref': !!str '#/components/responses/http_CurrentlySyncing' },
                },
            },
        },
      !!str '/eth/v1/validator/contribution_and_proofs':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'publishContributionAndProofs',
              !!str 'summary': !!str 'Publish multiple contribution and proofs',
              !!str 'description': !!str 'Publish multiple signed sync committee contribution and proofs',
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'requestBody':
                !!map {
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/SignedContributionAndProof',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200': !!map { !!str 'description': !!str 'Successful response' },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/validator/prepare_beacon_proposer':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'prepareBeaconProposer',
              !!str 'summary': !!str 'Provide beacon node with proposals for the given validators.',
              !!str 'description': !!str "Prepares the beacon node for potential proposers by supplying\ninformation\n\nrequired when proposing blocks for the given validators.  The\ninformation\n\nsupplied for each validator index will persist through the epoch in\nwhich\n\nthe call is submitted and for a further two epochs after that, or until\nthe\n\nbeacon node restarts.  It is expected that validator clients will send\nthis\n\ninformation periodically, for example each epoch, to ensure beacon nodes\nhave\n\ncorrect and timely fee recipient information.\n\n\nNote that there is no guarantee that the beacon node will use the\nsupplied fee\n\nrecipient when creating a block proposal, so on receipt of a proposed\nblock the\n\nvalidator should confirm that it finds the fee recipient within the\nblock\n\nacceptable before signing it.\n\n\nAlso note that requests containing currently inactive or unknown\nvalidator\n\nindices will be accepted, as they may become active at a later epoch.\n",
              !!str 'tags': !!seq [!!str 'ValidatorRequiredApi', !!str 'Validator'],
              !!str 'requestBody':
                !!map {
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str 'type': !!str 'object',
                                  !!str 'properties':
                                    !!map {
                                      !!str 'validator_index':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                                        },
                                      !!str 'fee_recipient':
                                        !!map {
                                          !!str '$ref': !!str '#/components/schemas/primitive_ExecutionAddress',
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str "Preparation information has been received.\n",
                    },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/validator/register_validator':
        !!map {
          !!str 'post':
            !!map {
              !!str 'operationId': !!str 'registerValidator',
              !!str 'summary': !!str "Provide beacon node with registrations for the given validators to the\nexternal builder network.",
              !!str 'description': !!str "Prepares the beacon node for engaging with external builders. The\n\ninformation will be sent by the beacon node to the builder network. It\nis\n\nexpected that the validator client will send this information\nperiodically\n\nto ensure the beacon node has correct and timely registration\ninformation\n\nto provide to builders. The validator client should not sign blinded\nbeacon\n\nblocks that do not adhere to their latest fee recipient and gas limit\n\npreferences.\n\n\nNote that requests containing currently inactive or unknown validator\n\npubkeys will be accepted, as they may become active at a later epoch.\n",
              !!str 'tags': !!seq [!!str 'Validator'],
              !!str 'requestBody':
                !!map {
                  !!str 'content':
                    !!map {
                      !!str 'application/json':
                        !!map {
                          !!str 'schema':
                            !!map {
                              !!str 'type': !!str 'array',
                              !!str 'items':
                                !!map {
                                  !!str '$ref': !!str '#/components/schemas/registration_SignedValidatorRegistration',
                                },
                            },
                        },
                    },
                },
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Registration information has been received.',
                    },
                  !!str '400':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InvalidRequest' },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
      !!str '/eth/v1/events':
        !!map {
          !!str 'get':
            !!map {
              !!str 'operationId': !!str 'eventstream',
              !!str 'summary': !!str 'Subscribe to beacon node events',
              !!str 'tags': !!seq [!!str 'Events', !!str 'ValidatorRequiredApi'],
              !!str 'description': !!str "Provides endpoint to subscribe to beacon node Server-Sent-Events stream.\n\nConsumers should use\n[eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\n\nimplementation to listen on those events.\n\n\nServers _may_ send SSE comments beginning with `:` for any purpose,\nincluding to keep the\n\nevent stream connection alive in the presence of proxy servers.\n",
              !!str 'parameters':
                !!seq [
                  !!map {
                    !!str 'name': !!str 'topics',
                    !!str 'in': !!str 'query',
                    !!str 'required': !!str 'true',
                    !!str 'description': !!str 'Event types to subscribe to',
                    !!str 'schema':
                      !!map {
                        !!str 'type': !!str 'array',
                        !!str 'items':
                          !!map {
                            !!str 'type': !!str 'string',
                            !!str 'uniqueItems': !!str 'true',
                            !!str 'enum':
                              !!seq [
                                !!str 'head',
                                !!str 'block',
                                !!str 'attestation',
                                !!str 'voluntary_exit',
                                !!str 'finalized_checkpoint',
                                !!str 'chain_reorg',
                                !!str 'contribution_and_proof',
                              ],
                          },
                      },
                  },
                ],
              !!str 'responses':
                !!map {
                  !!str '200':
                    !!map {
                      !!str 'description': !!str 'Opened SSE stream.',
                      !!str 'content':
                        !!map {
                          !!str 'text/event-stream':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'type': !!str 'string',
                                  !!str 'description': !!str 'https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format',
                                },
                              !!str 'examples':
                                !!map {
                                  !!str 'head':
                                    !!map {
                                      !!str 'description': !!str "The node has finished processing, resulting in a new head.\nprevious_duty_dependent_root is\n`get_block_root_at_slot(state,\ncompute_start_slot_at_epoch(epoch - 1) - 1)` and\ncurrent_duty_dependent_root is\n`get_block_root_at_slot(state,\ncompute_start_slot_at_epoch(epoch) - 1)`. Both dependent\nroots use the genesis block root in the case of underflow.",
                                      !!str 'value': !!str "event: head\n\ndata: {\"slot\":\"10\",\n\"block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\",\n\"state\":\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\",\n\"epoch_transition\":false,\n\"previous_duty_dependent_root\":\"0x5e0043f107cb57913498fbf2f99ff55e730bf1e151f02f221e977c91a90a0e91\",\n\"current_duty_dependent_root\":\"0x5e0043f107cb57913498fbf2f99ff55e730bf1e151f02f221e977c91a90a0e91\",\n\"execution_optimistic\": false}\n",
                                    },
                                  !!str 'block':
                                    !!map {
                                      !!str 'description': !!str 'The node has received a valid block (from P2P or API)',
                                      !!str 'value': !!str "event: block\n\ndata: {\"slot\":\"10\",\n\"block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\",\n\"execution_optimistic\": false}\n",
                                    },
                                  !!str 'attestation':
                                    !!map {
                                      !!str 'description': !!str 'The node has received a valid attestation (from P2P or API)',
                                      !!str 'value': !!str "event: attestation\n\ndata: {\"aggregation_bits\":\"0x01\",\n\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\",\n\"data\":{\"slot\":\"1\", \"index\":\"1\",\n\"beacon_block_root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n\"source\":{\"epoch\":\"1\",\n\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"},\n\"target\":{\"epoch\":\"1\",\n\"root\":\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\"}}}\n",
                                    },
                                  !!str 'voluntary_exit':
                                    !!map {
                                      !!str 'description': !!str "The node has received a valid voluntary exit (from P2P or\nAPI)",
                                      !!str 'value': !!str "event: voluntary_exit\n\ndata: {\"message\":{\"epoch\":\"1\", \"validator_index\":\"1\"},\n\"signature\":\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"}\n",
                                    },
                                  !!str 'finalized_checkpoint':
                                    !!map {
                                      !!str 'description': !!str 'Finalized checkpoint has been updated',
                                      !!str 'value': !!str "event: finalized_checkpoint\n\ndata:\n{\"block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\",\n\"state\":\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\",\n\"epoch\":\"2\", \"execution_optimistic\": false }\n",
                                    },
                                  !!str 'chain_reorg':
                                    !!map {
                                      !!str 'description': !!str 'The node has reorganized its chain',
                                      !!str 'value': !!str "event: chain_reorg\n\ndata: {\"slot\":\"200\", \"depth\":\"50\",\n\"old_head_block\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\",\n\"new_head_block\":\"0x76262e91970d375a19bfe8a867288d7b9cde43c8635f598d93d39d041706fc76\",\n\"old_head_state\":\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\",\n\"new_head_state\":\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\",\n\"epoch\":\"2\", \"execution_optimistic\": false}\n",
                                    },
                                  !!str 'contribution_and_proof':
                                    !!map {
                                      !!str 'description': !!str "The node has received a valid sync committee\nSignedContributionAndProof (from P2P or API)",
                                      !!str 'value': !!str "event: contribution_and_proof\n\ndata: {\"message\": {\"aggregator_index\": \"997\",\n\"contribution\": {\"slot\": \"168097\", \"beacon_block_root\":\n\"0x56f1fd4262c08fa81e27621c370e187e621a67fc80fe42340b07519f84b42ea1\",\n\"subcommittee_index\": \"0\", \"aggregation_bits\":\n\"0xffffffffffffffffffffffffffffffff\", \"signature\":\n\"0x85ab9018e14963026476fdf784cc674da144b3dbdb47516185438768774f077d882087b90ad642469902e782a8b43eed0cfc1b862aa9a473b54c98d860424a702297b4b648f3f30bdaae8a8b7627d10d04cb96a2cc8376af3e54a9aa0c8145e3\"},\n\"selection_proof\":\n\"0x87c305f04bfe5db27c2b19fc23e00d7ac496ec7d3e759cbfdd1035cb8cf6caaa17a36a95a08ba78c282725e7b66a76820ca4eb333822bd399ceeb9807a0f2926c67ce67cfe06a0b0006838203b493505a8457eb79913ce1a3bcd1cc8e4ef30ed\"},\n\"signature\":\n\"0xac118511474a94f857300b315c50585c32a713e4452e26a6bb98cdb619936370f126ed3b6bb64469259ee92e69791d9e12d324ce6fd90081680ce72f39d85d50b0ff977260a8667465e613362c6d6e6e745e1f9323ec1d6f16041c4e358839ac\"}\n",
                                    },
                                },
                            },
                        },
                    },
                  !!str '400':
                    !!map {
                      !!str 'description': !!str 'The topics supplied could not be parsed',
                      !!str 'content':
                        !!map {
                          !!str 'application/json':
                            !!map {
                              !!str 'schema':
                                !!map {
                                  !!str 'allOf':
                                    !!seq [
                                      !!map {
                                        !!str '$ref': !!str '#/components/schemas/http_ErrorMessage',
                                      },
                                      !!map {
                                        !!str 'example':
                                          !!map {
                                            !!str 'code': !!str '400',
                                            !!str 'message': !!str 'Invalid topic: weather_forecast',
                                          },
                                      },
                                    ],
                                },
                            },
                        },
                    },
                  !!str '500':
                    !!map { !!str '$ref': !!str '#/components/responses/http_InternalError' },
                },
            },
        },
    },
  !!str 'components':
    !!map {
      !!str 'schemas':
        !!map {
          !!str 'BeaconState':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'genesis_time':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'genesis_validators_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'fork': !!map { !!str '$ref': !!str '#/components/schemas/misc_Fork' },
                  !!str 'latest_block_header':
                    !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockHeader' },
                  !!str 'block_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'state_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'historical_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'maxItems': !!str '16777216',
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'eth1_data_votes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' }],
                        },
                      !!str 'maxItems': !!str '1024',
                    },
                  !!str 'eth1_deposit_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'validators':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Validator' }],
                        },
                    },
                  !!str 'balances':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Validator balances in gwei',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'randao_mixes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Bytes32' }],
                        },
                      !!str 'minItems': !!str '65536',
                      !!str 'maxItems': !!str '65536',
                    },
                  !!str 'slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Per-epoch sums of slashed effective balances',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'previous_epoch_attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map {
                                !!str '$ref': !!str '#/components/schemas/PendingAttestation',
                              },
                            ],
                        },
                    },
                  !!str 'current_epoch_attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map {
                                !!str '$ref': !!str '#/components/schemas/PendingAttestation',
                              },
                            ],
                        },
                    },
                  !!str 'justification_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'example': !!str '0x01',
                      !!str 'description': !!str 'Bit set for every recent justified epoch',
                    },
                  !!str 'previous_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'current_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'finalized_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                },
            },
          !!str 'BeaconBlock':
            !!map {
              !!str 'description': !!str "The\n[`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock)\nobject from the CL spec.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'body':
                          !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockBody' },
                      },
                  },
                ],
            },
          !!str 'SignedBeaconBlock':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblock)\nobject envelope from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/block_BeaconBlock' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'SignedBeaconBlockHeader':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader)\nobject envelope from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockHeader' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'ValidatorResponse':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'balance':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Current validator balance in gwei.' },
                        ],
                    },
                  !!str 'status':
                    !!map { !!str '$ref': !!str '#/components/schemas/api_ValidatorStatus' },
                  !!str 'validator': !!map { !!str '$ref': !!str '#/components/schemas/Validator' },
                },
            },
          !!str 'ValidatorBalanceResponse':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'balance':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Current validator balance in gwei.' },
                        ],
                    },
                },
            },
          !!str 'ValidatorStatus':
            !!map {
              !!str 'description': !!str "Possible statuses:\n\n- **pending_initialized** - When the first deposit is processed, but not\nenough funds are available (or not yet the end of the first epoch) to\nget validator into the activation queue.\n\n- **pending_queued** - When validator is waiting to get activated, and\nhave enough funds etc. while in the queue, validator activation epoch\nkeeps changing until it gets to the front and make it through\n(finalization is a requirement here too).\n\n- **active_ongoing** - When validator must be attesting, and have not\ninitiated any exit.\n\n- **active_exiting** - When validator is still active, but filed a\nvoluntary request to exit.\n\n- **active_slashed** - When validator is still active, but have a\nslashed status and is scheduled to exit.\n\n- **exited_unslashed** - When validator has reached reguler exit epoch,\nnot being slashed, and doesn't have to attest any more, but cannot\nwithdraw yet.\n\n- **exited_slashed** - When validator has reached reguler exit epoch,\nbut was slashed, have to wait for a longer withdrawal period.\n\n- **withdrawal_possible** - After validator has exited, a while later is\npermitted to move funds, and is truly out of the system.\n\n- **withdrawal_done** - (not possible in phase0, except slashing full\nbalance) - actually having moved funds away\n\n\n[Validator status\nspecification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n",
              !!str 'enum':
                !!seq [
                  !!str 'pending_initialized',
                  !!str 'pending_queued',
                  !!str 'active_ongoing',
                  !!str 'active_exiting',
                  !!str 'active_slashed',
                  !!str 'exited_unslashed',
                  !!str 'exited_slashed',
                  !!str 'withdrawal_possible',
                  !!str 'withdrawal_done',
                ],
              !!str 'example': !!str 'active_ongoing',
            },
          !!str 'Committee':
            !!map {
              !!str 'description': !!str "Group of validators assigned to attest at specific slot and that have\nthe same committee index (shard in phase 1)",
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Committee index at a slot' },
                        ],
                    },
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'validators':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'List of validator indices assigned to this committee',
                      !!str 'items':
                        !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                    },
                },
            },
          !!str 'AttesterSlashing':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/core/0_beacon-chain.md#attesterslashing)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'attestation_1':
                    !!map { !!str '$ref': !!str '#/components/schemas/IndexedAttestation' },
                  !!str 'attestation_2':
                    !!map { !!str '$ref': !!str '#/components/schemas/IndexedAttestation' },
                },
            },
          !!str 'ProposerSlashing':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`ProposerSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#proposerslashing)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'signed_header_1':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlockHeader',
                    },
                  !!str 'signed_header_2':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlockHeader',
                    },
                },
            },
          !!str 'SignedVoluntaryExit':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedVoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedvoluntaryexit)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/VoluntaryExit' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'AttesterDuty':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'validator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry',
                          },
                        ],
                    },
                  !!str 'committee_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'The committee index' },
                        ],
                    },
                  !!str 'committee_length':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Number of validators in committee' },
                        ],
                    },
                  !!str 'committees_at_slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Number of committees at the provided slot',
                          },
                        ],
                    },
                  !!str 'validator_committee_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Index of validator in committee' },
                        ],
                    },
                  !!str 'slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'The slot at which the validator must attest.',
                          },
                        ],
                    },
                },
            },
          !!str 'ProposerDuty':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'validator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'The slot at which the validator must propose block.',
                          },
                        ],
                    },
                },
            },
          !!str 'Altair.SyncDuty': !!map { !!str '$ref': !!str '#/components/schemas/SyncDuty' },
          !!str 'SignedAggregateAndProof':
            !!map {
              !!str 'description': !!str "The\n[`SignedAggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/validator.md#signedaggregateandproof)\nobject",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/AggregateAndProof' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'Attestation':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestation)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'aggregation_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'example': !!str '0x01',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'description': !!str 'Attester aggregation bits.',
                    },
                  !!str 'signature':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map { !!str 'description': !!str 'BLS aggregate signature.' },
                        ],
                    },
                  !!str 'data':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/attestation_AttestationData',
                    },
                },
            },
          !!str 'AttestationData':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'beacon_block_root':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'LMD GHOST vote.' },
                        ],
                    },
                  !!str 'source':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'target':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                },
            },
          !!str 'Fork':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'previous_version':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_ForkVersion' },
                  !!str 'current_version':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_ForkVersion' },
                  !!str 'epoch':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                },
            },
          !!str 'Checkpoint':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint",
              !!str 'properties':
                !!map {
                  !!str 'epoch':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'root': !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                },
            },
          !!str 'Uint64': !!map { !!str 'type': !!str 'string', !!str 'example': !!str '1' },
          !!str 'NetworkIdentity':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'peer_id': !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerId' },
                  !!str 'enr': !!map { !!str '$ref': !!str '#/components/schemas/ENR' },
                  !!str 'p2p_addresses':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/Multiaddr' },
                              !!map {
                                !!str 'description': !!str "Node's addresses on which eth2 rpc requests are served. [Read\nmore](https://docs.libp2p.io/reference/glossary/#multiaddr)",
                              },
                            ],
                        },
                    },
                  !!str 'discovery_addresses':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/Multiaddr' },
                              !!map {
                                !!str 'description': !!str "Node's addresses on which is listening for discv5 requests.\n[Read\nmore](https://docs.libp2p.io/reference/glossary/#multiaddr)",
                              },
                              !!map {
                                !!str 'example': !!str '/ip4/7.7.7.7/udp/30303/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N',
                              },
                            ],
                        },
                    },
                  !!str 'metadata': !!map { !!str '$ref': !!str '#/components/schemas/MetaData' },
                },
            },
          !!str 'Peer':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'peer_id': !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerId' },
                  !!str 'enr':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/ENR' },
                          !!map { !!str 'nullable': !!str 'true' },
                        ],
                    },
                  !!str 'last_seen_p2p_address':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/Multiaddr' },
                          !!map {
                            !!str 'description': !!str 'Multiaddrs used in last peer connection.',
                          },
                        ],
                    },
                  !!str 'state':
                    !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerConnectionState' },
                  !!str 'direction':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/p2p_PeerConnectionDirection',
                    },
                },
            },
          !!str 'PeerId':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str "Cryptographic hash of a peer\u2019s public key. [Read\nmore](https://docs.libp2p.io/concepts/peer-id/)",
              !!str 'example': !!str 'QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N',
            },
          !!str 'PeerConnectionState':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'enum':
                !!seq [
                  !!str 'disconnected',
                  !!str 'connecting',
                  !!str 'connected',
                  !!str 'disconnecting',
                ],
            },
          !!str 'PeerConnectionDirection':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'enum': !!seq [!!str 'inbound', !!str 'outbound'],
            },
          !!str 'GenesisTime':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!map { !!str 'example': !!str '1590832934' },
                  !!map {
                    !!str 'description': !!str "The genesis_time configured for the beacon node, which is the unix\ntime in seconds at which the Eth2.0 chain began.",
                  },
                ],
            },
          !!str 'Version':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str "A string which uniquely identifies the client implementation and its\nversion; similar to [HTTP\nUser-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).",
              !!str 'example': !!str 'Lighthouse/v0.1.5 (Linux x86_64)',
            },
          !!str 'ForkVersion':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'a fork version number',
              !!str 'example': !!str '0x00000000',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{8}$',
            },
          !!str 'DependentRoot':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!map {
                    !!str 'description': !!str 'The block root that this response is dependent on.',
                  },
                ],
            },
          !!str 'ExecutionOptimistic':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str 'type': !!str 'boolean' },
                  !!map { !!str 'example': !!str 'false' },
                  !!map {
                    !!str 'description': !!str "True if the response references an unverified execution payload.\nOptimistic information may be invalidated at a later time. If the\nfield is not present, assume the False value.",
                  },
                ],
            },
          !!str 'Root':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'example': !!str '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
            },
          !!str 'Hex':
            !!map { !!str 'type': !!str 'string', !!str 'pattern': !!str '^0x[a-fA-F0-9]{2,}$' },
          !!str 'Graffiti':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'format': !!str 'hex',
              !!str 'example': !!str '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
            },
          !!str 'Signature':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{192}$',
              !!str 'example': !!str '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505',
            },
          !!str 'ErrorMessage':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'code':
                    !!map {
                      !!str 'description': !!str "Either specific error code in case of invalid request or http status\ncode",
                      !!str 'type': !!str 'number',
                      !!str 'example': !!str '404',
                    },
                  !!str 'message':
                    !!map {
                      !!str 'description': !!str 'Message describing error',
                      !!str 'type': !!str 'string',
                    },
                  !!str 'stacktraces':
                    !!map {
                      !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                      !!str 'type': !!str 'array',
                      !!str 'items': !!map { !!str 'type': !!str 'string' },
                    },
                },
            },
          !!str 'IndexedErrorMessage':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'code':
                    !!map {
                      !!str 'description': !!str "Either specific error code in case of invalid request or http status\ncode",
                      !!str 'type': !!str 'number',
                      !!str 'example': !!str '400',
                    },
                  !!str 'message':
                    !!map {
                      !!str 'description': !!str 'Message describing error',
                      !!str 'type': !!str 'string',
                      !!str 'example': !!str 'some failures',
                    },
                  !!str 'failures':
                    !!map {
                      !!str 'description': !!str 'List of individual items that have failed',
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'index':
                                !!map {
                                  !!str 'description': !!str 'Index of item in the request list that caused the error',
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '3',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                  !!str 'example': !!str 'invalid signature',
                                },
                            },
                        },
                    },
                },
            },
          !!str 'Altair.SignedBeaconBlock':
            !!map { !!str '$ref': !!str '#/components/schemas/Altair-SignedBeaconBlock' },
          !!str 'Altair.BeaconBlock':
            !!map { !!str '$ref': !!str '#/components/schemas/Altair-BeaconBlock' },
          !!str 'Altair.BeaconState':
            !!map { !!str '$ref': !!str '#/components/schemas/Altair-BeaconState' },
          !!str 'Altair.SyncCommitteeSignature':
            !!map { !!str '$ref': !!str '#/components/schemas/SyncCommitteeSignature' },
          !!str 'Altair.SyncCommitteeSubscription':
            !!map { !!str '$ref': !!str '#/components/schemas/SyncCommitteeSubscription' },
          !!str 'Altair.ContributionAndProof':
            !!map { !!str '$ref': !!str '#/components/schemas/ContributionAndProof' },
          !!str 'Altair.SignedContributionAndProof':
            !!map { !!str '$ref': !!str '#/components/schemas/SignedContributionAndProof' },
          !!str 'Altair.SyncCommitteeContribution':
            !!map { !!str '$ref': !!str '#/components/schemas/SyncCommitteeContribution' },
          !!str 'Altair.SyncCommittee':
            !!map { !!str '$ref': !!str '#/components/schemas/SyncCommitteeByValidatorIndices' },
          !!str 'ExecutionAddress':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'An address on the execution (Ethereum 1) network.',
              !!str 'example': !!str '0xabcf8e0d4e9587369b2301d0790347320302cc09',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{40}$',
            },
          !!str 'Bellatrix.BeaconState':
            !!map { !!str '$ref': !!str '#/components/schemas/Bellatrix-BeaconState' },
          !!str 'Bellatrix.BeaconBlock':
            !!map { !!str '$ref': !!str '#/components/schemas/Bellatrix-BeaconBlock' },
          !!str 'Bellatrix.SignedBeaconBlock':
            !!map { !!str '$ref': !!str '#/components/schemas/Bellatrix-SignedBeaconBlock' },
          !!str 'Bellatrix.BlindedBeaconBlock':
            !!map { !!str '$ref': !!str '#/components/schemas/BlindedBeaconBlock' },
          !!str 'Bellatrix.SignedBlindedBeaconBlock':
            !!map { !!str '$ref': !!str '#/components/schemas/SignedBlindedBeaconBlock' },
          !!str 'ConsensusVersion':
            !!map {
              !!str 'enum': !!seq [!!str 'phase0', !!str 'altair', !!str 'bellatrix'],
              !!str 'example': !!str 'phase0',
            },
          !!str 'SignedValidatorRegistration':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The `SignedValidatorRegistration` object from the Builder API\nspecification.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/ValidatorRegistration' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'primitive_Uint64':
            !!map { !!str 'type': !!str 'string', !!str 'example': !!str '1' },
          !!str 'primitive_GenesisTime':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!map { !!str 'example': !!str '1590832934' },
                  !!map {
                    !!str 'description': !!str "The genesis_time configured for the beacon node, which is the unix\ntime in seconds at which the Eth2.0 chain began.",
                  },
                ],
            },
          !!str 'primitive_Root':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'example': !!str '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
            },
          !!str 'primitive_ForkVersion':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'a fork version number',
              !!str 'example': !!str '0x00000000',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{8}$',
            },
          !!str 'http_ErrorMessage':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'code':
                    !!map {
                      !!str 'description': !!str "Either specific error code in case of invalid request or http status\ncode",
                      !!str 'type': !!str 'number',
                      !!str 'example': !!str '404',
                    },
                  !!str 'message':
                    !!map {
                      !!str 'description': !!str 'Message describing error',
                      !!str 'type': !!str 'string',
                    },
                  !!str 'stacktraces':
                    !!map {
                      !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                      !!str 'type': !!str 'array',
                      !!str 'items': !!map { !!str 'type': !!str 'string' },
                    },
                },
            },
          !!str 'primitive_ExecutionOptimistic':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str 'type': !!str 'boolean' },
                  !!map { !!str 'example': !!str 'false' },
                  !!map {
                    !!str 'description': !!str "True if the response references an unverified execution payload.\nOptimistic information may be invalidated at a later time. If the\nfield is not present, assume the False value.",
                  },
                ],
            },
          !!str 'misc_Fork':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Fork`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#fork)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'previous_version':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_ForkVersion' },
                  !!str 'current_version':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_ForkVersion' },
                  !!str 'epoch':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                },
            },
          !!str 'misc_Checkpoint':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Checkpoint`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#checkpoint",
              !!str 'properties':
                !!map {
                  !!str 'epoch':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'root': !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                },
            },
          !!str 'api_ValidatorStatus':
            !!map {
              !!str 'description': !!str "Possible statuses:\n\n- **pending_initialized** - When the first deposit is processed, but not\nenough funds are available (or not yet the end of the first epoch) to\nget validator into the activation queue.\n\n- **pending_queued** - When validator is waiting to get activated, and\nhave enough funds etc. while in the queue, validator activation epoch\nkeeps changing until it gets to the front and make it through\n(finalization is a requirement here too).\n\n- **active_ongoing** - When validator must be attesting, and have not\ninitiated any exit.\n\n- **active_exiting** - When validator is still active, but filed a\nvoluntary request to exit.\n\n- **active_slashed** - When validator is still active, but have a\nslashed status and is scheduled to exit.\n\n- **exited_unslashed** - When validator has reached reguler exit epoch,\nnot being slashed, and doesn't have to attest any more, but cannot\nwithdraw yet.\n\n- **exited_slashed** - When validator has reached reguler exit epoch,\nbut was slashed, have to wait for a longer withdrawal period.\n\n- **withdrawal_possible** - After validator has exited, a while later is\npermitted to move funds, and is truly out of the system.\n\n- **withdrawal_done** - (not possible in phase0, except slashing full\nbalance) - actually having moved funds away\n\n\n[Validator status\nspecification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n",
              !!str 'enum':
                !!seq [
                  !!str 'pending_initialized',
                  !!str 'pending_queued',
                  !!str 'active_ongoing',
                  !!str 'active_exiting',
                  !!str 'active_slashed',
                  !!str 'exited_unslashed',
                  !!str 'exited_slashed',
                  !!str 'withdrawal_possible',
                  !!str 'withdrawal_done',
                ],
              !!str 'example': !!str 'active_ongoing',
            },
          !!str 'Pubkey':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{96}$',
              !!str 'description': !!str "The validator's BLS public key, uniquely identifying them. _48-bytes,\nhex encoded with 0x prefix, case insensitive._",
              !!str 'example': !!str '0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a',
            },
          !!str 'Validator':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'withdrawal_credentials':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'Root of withdrawal credentials' },
                        ],
                    },
                  !!str 'effective_balance':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Balance at stake in Gwei.' },
                        ],
                    },
                  !!str 'slashed':
                    !!map {
                      !!str 'type': !!str 'boolean',
                      !!str 'example': !!str 'false',
                      !!str 'description': !!str 'Was validator slashed (not longer active).',
                    },
                  !!str 'activation_eligibility_epoch':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'When criteria for activation were met.',
                          },
                        ],
                    },
                  !!str 'activation_epoch':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str "Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not\nactivated",
                          },
                        ],
                    },
                  !!str 'exit_epoch':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str "Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.",
                          },
                        ],
                    },
                  !!str 'withdrawable_epoch':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str "When validator can withdraw or transfer funds.\n'FAR_FUTURE_EPOCH' if not defined",
                          },
                        ],
                    },
                },
            },
          !!str 'api_ValidatorResponse':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'balance':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Current validator balance in gwei.' },
                        ],
                    },
                  !!str 'status':
                    !!map { !!str '$ref': !!str '#/components/schemas/api_ValidatorStatus' },
                  !!str 'validator': !!map { !!str '$ref': !!str '#/components/schemas/Validator' },
                },
            },
          !!str 'api_ValidatorBalanceResponse':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'balance':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Current validator balance in gwei.' },
                        ],
                    },
                },
            },
          !!str 'api_Committee':
            !!map {
              !!str 'description': !!str "Group of validators assigned to attest at specific slot and that have\nthe same committee index (shard in phase 1)",
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Committee index at a slot' },
                        ],
                    },
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'validators':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'List of validator indices assigned to this committee',
                      !!str 'items':
                        !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                    },
                },
            },
          !!str 'ValidatorsByIndex':
            !!map {
              !!str 'type': !!str 'array',
              !!str 'items':
                !!map {
                  !!str 'allOf':
                    !!seq [!!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' }],
                },
            },
          !!str 'SyncCommitteeByValidatorIndices':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'validators':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/ValidatorsByIndex' },
                          !!map {
                            !!str 'description': !!str 'all of the validator indices in the current sync committee',
                          },
                        ],
                    },
                  !!str 'validator_aggregates':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map {
                                !!str '$ref': !!str '#/components/schemas/ValidatorsByIndex',
                              },
                              !!map {
                                !!str 'description': !!str 'Subcommittee slices of the current sync committee',
                              },
                            ],
                        },
                    },
                },
            },
          !!str 'BeaconBlockCommon':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'The slot to which this block corresponds.',
                          },
                        ],
                    },
                  !!str 'proposer_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'parent_root':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map {
                            !!str 'description': !!str 'The signing merkle root of the parent `BeaconBlock`.',
                          },
                        ],
                    },
                  !!str 'state_root':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map {
                            !!str 'description': !!str "The tree hash merkle root of the `BeaconState` for the\n`BeaconBlock`.",
                          },
                        ],
                    },
                },
            },
          !!str 'BeaconBlockHeader':
            !!map {
              !!str 'description': !!str "The\n[`BeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockheader)\nobject from the CL spec.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'body_root':
                          !!map {
                            !!str 'allOf':
                              !!seq [
                                !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                                !!map {
                                  !!str 'description': !!str "The tree hash merkle root of the `BeaconBlockBody` for the\n`BeaconBlock`",
                                },
                              ],
                          },
                      },
                  },
                ],
            },
          !!str 'primitive_Signature':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{192}$',
              !!str 'example': !!str '0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505',
            },
          !!str 'block_SignedBeaconBlockHeader':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedBeaconBlockHeader`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblockheader)\nobject envelope from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockHeader' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'Eth1Data':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Eth1Data`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#eth1data)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'deposit_root':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'Root of the deposit tree.' },
                        ],
                    },
                  !!str 'deposit_count':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Total number of deposits.' },
                        ],
                    },
                  !!str 'block_hash':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'Ethereum 1.x block hash.' },
                        ],
                    },
                },
            },
          !!str 'proposer_slashing_ProposerSlashing':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`ProposerSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#proposerslashing)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'signed_header_1':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlockHeader',
                    },
                  !!str 'signed_header_2':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/block_SignedBeaconBlockHeader',
                    },
                },
            },
          !!str 'attestation_AttestationData':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`AttestationData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestationdata)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'beacon_block_root':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'LMD GHOST vote.' },
                        ],
                    },
                  !!str 'source':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'target':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                },
            },
          !!str 'IndexedAttestation':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`IndexedAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#indexedattestation)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'attesting_indices':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '2048',
                      !!str 'description': !!str 'Attesting validator indices',
                      !!str 'items':
                        !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                    },
                  !!str 'signature':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map {
                            !!str 'description': !!str "The BLS signature of the `IndexedAttestation`, created by the\nvalidator of the attestation.",
                          },
                        ],
                    },
                  !!str 'data':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/attestation_AttestationData',
                    },
                },
            },
          !!str 'attester_slashing_AttesterSlashing':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`AttesterSlashing`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/core/0_beacon-chain.md#attesterslashing)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'attestation_1':
                    !!map { !!str '$ref': !!str '#/components/schemas/IndexedAttestation' },
                  !!str 'attestation_2':
                    !!map { !!str '$ref': !!str '#/components/schemas/IndexedAttestation' },
                },
            },
          !!str 'attestation_Attestation':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Attestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#attestation)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'aggregation_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'example': !!str '0x01',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'description': !!str 'Attester aggregation bits.',
                    },
                  !!str 'signature':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map { !!str 'description': !!str 'BLS aggregate signature.' },
                        ],
                    },
                  !!str 'data':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/attestation_AttestationData',
                    },
                },
            },
          !!str 'DepositData':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`DepositData`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#depositdata)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'withdrawal_credentials':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'The withdrawal credentials.' },
                        ],
                    },
                  !!str 'amount':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Amount in Gwei.' },
                        ],
                    },
                  !!str 'signature':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map { !!str 'description': !!str 'Container self-signature.' },
                        ],
                    },
                },
            },
          !!str 'Deposit':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`Deposit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#deposit)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'proof':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Branch in the deposit tree.',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '32',
                      !!str 'maxItems': !!str '32',
                    },
                  !!str 'data': !!map { !!str '$ref': !!str '#/components/schemas/DepositData' },
                },
            },
          !!str 'VoluntaryExit':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`VoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#voluntaryexit)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'epoch':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Minimum epoch for processing exit.' },
                        ],
                    },
                  !!str 'validator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Index of the exiting validator.' },
                        ],
                    },
                },
            },
          !!str 'voluntary_exit_SignedVoluntaryExit':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedVoluntaryExit`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedvoluntaryexit)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/VoluntaryExit' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'BeaconBlockBody':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblockbody)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'randao_reveal':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map {
                            !!str 'description': !!str 'The RanDAO reveal value provided by the validator.',
                          },
                        ],
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'graffiti':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
                    },
                  !!str 'proposer_slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/proposer_slashing_ProposerSlashing',
                        },
                    },
                  !!str 'attester_slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/attester_slashing_AttesterSlashing',
                        },
                    },
                  !!str 'attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                        },
                    },
                  !!str 'deposits':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items': !!map { !!str '$ref': !!str '#/components/schemas/Deposit' },
                    },
                  !!str 'voluntary_exits':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/voluntary_exit_SignedVoluntaryExit',
                        },
                    },
                },
            },
          !!str 'block_BeaconBlock':
            !!map {
              !!str 'description': !!str "The\n[`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock)\nobject from the CL spec.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'body':
                          !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockBody' },
                      },
                  },
                ],
            },
          !!str 'block_SignedBeaconBlock':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#signedbeaconblock)\nobject envelope from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/block_BeaconBlock' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'SyncAggregate':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SyncAggregate`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.1/specs/altair/beacon-chain.md#syncaggregate)\nobject from the CL Altair spec.",
              !!str 'properties':
                !!map {
                  !!str 'sync_committee_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'example': !!str '0x01',
                      !!str 'description': !!str 'Aggregation bits of sync',
                    },
                  !!str 'sync_committee_signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'Altair-BeaconBlockBody':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblockbody)\nobject from the CL Altair spec.",
              !!str 'properties':
                !!map {
                  !!str 'randao_reveal':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map {
                            !!str 'description': !!str 'The RanDAO reveal value provided by the validator.',
                          },
                        ],
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'graffiti':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
                    },
                  !!str 'proposer_slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/proposer_slashing_ProposerSlashing',
                        },
                    },
                  !!str 'attester_slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/attester_slashing_AttesterSlashing',
                        },
                    },
                  !!str 'attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                        },
                    },
                  !!str 'deposits':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items': !!map { !!str '$ref': !!str '#/components/schemas/Deposit' },
                    },
                  !!str 'voluntary_exits':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/voluntary_exit_SignedVoluntaryExit',
                        },
                    },
                  !!str 'sync_aggregate':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncAggregate' },
                },
            },
          !!str 'Altair-BeaconBlock':
            !!map {
              !!str 'description': !!str "The\n[`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconblock)\nobject from the CL Altair spec.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'body':
                          !!map {
                            !!str '$ref': !!str '#/components/schemas/Altair-BeaconBlockBody',
                          },
                      },
                  },
                ],
            },
          !!str 'Altair-SignedBeaconBlock':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#signedbeaconblock)\nobject envelope from the CL Altair spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/Altair-BeaconBlock' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'BeaconBlockBodyCommon':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblockbody)\nobject from the CL Bellatrix spec.",
              !!str 'properties':
                !!map {
                  !!str 'randao_reveal':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map {
                            !!str 'description': !!str 'The RanDAO reveal value provided by the validator.',
                          },
                        ],
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'graffiti':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
                    },
                  !!str 'proposer_slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/proposer_slashing_ProposerSlashing',
                        },
                    },
                  !!str 'attester_slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/attester_slashing_AttesterSlashing',
                        },
                    },
                  !!str 'attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/attestation_Attestation',
                        },
                    },
                  !!str 'deposits':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items': !!map { !!str '$ref': !!str '#/components/schemas/Deposit' },
                    },
                  !!str 'voluntary_exits':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str '$ref': !!str '#/components/schemas/voluntary_exit_SignedVoluntaryExit',
                        },
                    },
                  !!str 'sync_aggregate':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncAggregate' },
                },
            },
          !!str 'primitive_ExecutionAddress':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'An address on the execution (Ethereum 1) network.',
              !!str 'example': !!str '0xabcf8e0d4e9587369b2301d0790347320302cc09',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{40}$',
            },
          !!str 'LogsBloom':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'example': !!str '0x
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{512}$',
            },
          !!str 'Bytes32':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'example': !!str '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
            },
          !!str 'ExtraData':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'Extra data on the execution (Ethereum 1) network.',
              !!str 'example': !!str '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{0,64}$',
            },
          !!str 'Uint256': !!map { !!str 'type': !!str 'string', !!str 'example': !!str '1' },
          !!str 'ExecutionPayloadCommon':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`ExecutionPayload`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayload)\nobject from the CL Bellatrix spec.",
              !!str 'properties':
                !!map {
                  !!str 'parent_hash':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'fee_recipient':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_ExecutionAddress' },
                  !!str 'state_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'receipts_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'logs_bloom':
                    !!map { !!str '$ref': !!str '#/components/schemas/LogsBloom' },
                  !!str 'prev_randao': !!map { !!str '$ref': !!str '#/components/schemas/Bytes32' },
                  !!str 'block_number':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'gas_limit':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'gas_used':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'timestamp':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'extra_data':
                    !!map { !!str '$ref': !!str '#/components/schemas/ExtraData' },
                  !!str 'base_fee_per_gas':
                    !!map { !!str '$ref': !!str '#/components/schemas/Uint256' },
                  !!str 'block_hash':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                },
            },
          !!str 'ExecutionPayloadHeader':
            !!map {
              !!str 'description': !!str "The\n[`ExecutionPayloadHeader`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#executionpayloadheader)\nobject from the CL Bellatrix spec.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/ExecutionPayloadCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'transactions_root':
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                      },
                  },
                ],
            },
          !!str 'BlindedBeaconBlockBody':
            !!map {
              !!str 'description': !!str "A variant of the\n[`BeaconBlockBody`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblockbody)\nobject from the CL Bellatrix spec, which contains a transactions root\nrather than a full transactions list.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockBodyCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'execution_payload_header':
                          !!map {
                            !!str '$ref': !!str '#/components/schemas/ExecutionPayloadHeader',
                          },
                      },
                  },
                ],
            },
          !!str 'BlindedBeaconBlock':
            !!map {
              !!str 'description': !!str "A variant of the the\n[`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock)\nobject from the CL Bellatrix spec, which contains a\n`BlindedBeaconBlockBody` rather than a `BeaconBlockBody`.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'body':
                          !!map {
                            !!str '$ref': !!str '#/components/schemas/BlindedBeaconBlockBody',
                          },
                      },
                  },
                ],
            },
          !!str 'SignedBlindedBeaconBlock':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "A variant of the the the\n[`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#signedbeaconblock)\nobject envelope from the CL Bellatrix spec, which contains a\n`BlindedBeaconBlock` rather than a `BeaconBlock`.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/BlindedBeaconBlock' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'Transaction':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'A transaction on the execution (Ethereum 1) network.',
              !!str 'example': !!str '0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{0,2147483648}$',
            },
          !!str 'Transactions':
            !!map {
              !!str 'type': !!str 'array',
              !!str 'items':
                !!map {
                  !!str 'allOf':
                    !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Transaction' }],
                },
              !!str 'maxItems': !!str '1048576',
            },
          !!str 'ExecutionPayload':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/ExecutionPayloadCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'transactions':
                          !!map { !!str '$ref': !!str '#/components/schemas/Transactions' },
                      },
                  },
                ],
            },
          !!str 'Bellatrix-BeaconBlockBody':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockBodyCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'execution_payload':
                          !!map { !!str '$ref': !!str '#/components/schemas/ExecutionPayload' },
                      },
                  },
                ],
            },
          !!str 'Bellatrix-BeaconBlock':
            !!map {
              !!str 'description': !!str "The\n[`BeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconblock)\nobject from the CL Bellatrix spec.",
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockCommon' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'body':
                          !!map {
                            !!str '$ref': !!str '#/components/schemas/Bellatrix-BeaconBlockBody',
                          },
                      },
                  },
                ],
            },
          !!str 'Bellatrix-SignedBeaconBlock':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`SignedBeaconBlock`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#signedbeaconblock)\nobject envelope from the CL Bellatrix spec.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/Bellatrix-BeaconBlock' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'http_IndexedErrorMessage':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'code':
                    !!map {
                      !!str 'description': !!str "Either specific error code in case of invalid request or http status\ncode",
                      !!str 'type': !!str 'number',
                      !!str 'example': !!str '400',
                    },
                  !!str 'message':
                    !!map {
                      !!str 'description': !!str 'Message describing error',
                      !!str 'type': !!str 'string',
                      !!str 'example': !!str 'some failures',
                    },
                  !!str 'failures':
                    !!map {
                      !!str 'description': !!str 'List of individual items that have failed',
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'index':
                                !!map {
                                  !!str 'description': !!str 'Index of item in the request list that caused the error',
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '3',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                  !!str 'example': !!str 'invalid signature',
                                },
                            },
                        },
                    },
                },
            },
          !!str 'SyncCommitteeSignature':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'beacon_block_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'validator_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'PendingAttestation':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`PendingAttestation`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#pendingattestation)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'aggregation_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'description': !!str 'Attester aggregation bits.',
                    },
                  !!str 'data':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/attestation_AttestationData',
                    },
                  !!str 'inclusion_delay':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'proposer_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                },
            },
          !!str 'state_BeaconState':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/beacon-chain.md#beaconblock)\nobject from the CL spec.",
              !!str 'properties':
                !!map {
                  !!str 'genesis_time':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'genesis_validators_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'fork': !!map { !!str '$ref': !!str '#/components/schemas/misc_Fork' },
                  !!str 'latest_block_header':
                    !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockHeader' },
                  !!str 'block_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'state_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'historical_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'maxItems': !!str '16777216',
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'eth1_data_votes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' }],
                        },
                      !!str 'maxItems': !!str '1024',
                    },
                  !!str 'eth1_deposit_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'validators':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Validator' }],
                        },
                    },
                  !!str 'balances':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Validator balances in gwei',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'randao_mixes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Bytes32' }],
                        },
                      !!str 'minItems': !!str '65536',
                      !!str 'maxItems': !!str '65536',
                    },
                  !!str 'slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Per-epoch sums of slashed effective balances',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'previous_epoch_attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map {
                                !!str '$ref': !!str '#/components/schemas/PendingAttestation',
                              },
                            ],
                        },
                    },
                  !!str 'current_epoch_attestations':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map {
                                !!str '$ref': !!str '#/components/schemas/PendingAttestation',
                              },
                            ],
                        },
                    },
                  !!str 'justification_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'example': !!str '0x01',
                      !!str 'description': !!str 'Bit set for every recent justified epoch',
                    },
                  !!str 'previous_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'current_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'finalized_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                },
            },
          !!str 'Uint8':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str 'Unsigned 8 bit integer, max value 255',
              !!str 'pattern': !!str '^[1-2]?[0-9]{1,2}$',
              !!str 'example': !!str '0',
            },
          !!str 'EpochParticipation':
            !!map {
              !!str 'type': !!str 'array',
              !!str 'items':
                !!map {
                  !!str 'allOf': !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Uint8' }],
                },
              !!str 'maxItems': !!str '1099511627776',
            },
          !!str 'SyncCommittee':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkeys':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Pubkey' }],
                        },
                      !!str 'minItems': !!str '512',
                      !!str 'maxItems': !!str '512',
                    },
                  !!str 'aggregate_pubkey':
                    !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                },
            },
          !!str 'Altair-BeaconState':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.1.0-alpha.3/specs/altair/beacon-chain.md#beaconstate)\nobject from the CL Altair spec.",
              !!str 'properties':
                !!map {
                  !!str 'genesis_time':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'genesis_validators_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'fork': !!map { !!str '$ref': !!str '#/components/schemas/misc_Fork' },
                  !!str 'latest_block_header':
                    !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockHeader' },
                  !!str 'block_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'state_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'historical_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'maxItems': !!str '16777216',
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'eth1_data_votes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' }],
                        },
                      !!str 'maxItems': !!str '1024',
                    },
                  !!str 'eth1_deposit_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'validators':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Validator' }],
                        },
                    },
                  !!str 'balances':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Validator balances in gwei',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'randao_mixes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Bytes32' }],
                        },
                      !!str 'minItems': !!str '65536',
                      !!str 'maxItems': !!str '65536',
                    },
                  !!str 'slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Per-epoch sums of slashed effective balances',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'previous_epoch_participation':
                    !!map { !!str '$ref': !!str '#/components/schemas/EpochParticipation' },
                  !!str 'current_epoch_participation':
                    !!map { !!str '$ref': !!str '#/components/schemas/EpochParticipation' },
                  !!str 'justification_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'example': !!str '0x01',
                      !!str 'description': !!str 'Bit set for every recent justified epoch',
                    },
                  !!str 'previous_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'current_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'finalized_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'inactivity_scores':
                    !!map {
                      !!str 'description': !!str 'Per-validator inactivity scores. New in Altair',
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'current_sync_committee':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncCommittee' },
                  !!str 'next_sync_committee':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncCommittee' },
                },
            },
          !!str 'Bellatrix-BeaconState':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`BeaconState`](https://github.com/ethereum/consensus-specs/blob/v1.1.9/specs/bellatrix/beacon-chain.md#beaconstate)\nobject from the Eth2.0 Bellatrix spec.",
              !!str 'properties':
                !!map {
                  !!str 'genesis_time':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'genesis_validators_root':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!str 'slot':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'fork': !!map { !!str '$ref': !!str '#/components/schemas/misc_Fork' },
                  !!str 'latest_block_header':
                    !!map { !!str '$ref': !!str '#/components/schemas/BeaconBlockHeader' },
                  !!str 'block_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'state_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'historical_roots':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                            ],
                        },
                      !!str 'maxItems': !!str '16777216',
                    },
                  !!str 'eth1_data': !!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' },
                  !!str 'eth1_data_votes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Eth1Data' }],
                        },
                      !!str 'maxItems': !!str '1024',
                    },
                  !!str 'eth1_deposit_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'validators':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Validator' }],
                        },
                    },
                  !!str 'balances':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Validator balances in gwei',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'randao_mixes':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [!!map { !!str '$ref': !!str '#/components/schemas/Bytes32' }],
                        },
                      !!str 'minItems': !!str '65536',
                      !!str 'maxItems': !!str '65536',
                    },
                  !!str 'slashings':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'Per-epoch sums of slashed effective balances',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                      !!str 'minItems': !!str '8192',
                      !!str 'maxItems': !!str '8192',
                    },
                  !!str 'previous_epoch_participation':
                    !!map { !!str '$ref': !!str '#/components/schemas/EpochParticipation' },
                  !!str 'current_epoch_participation':
                    !!map { !!str '$ref': !!str '#/components/schemas/EpochParticipation' },
                  !!str 'justification_bits':
                    !!map {
                      !!str 'type': !!str 'string',
                      !!str 'pattern': !!str '^0x[a-fA-F0-9]+$',
                      !!str 'example': !!str '0x01',
                      !!str 'description': !!str 'Bit set for every recent justified epoch',
                    },
                  !!str 'previous_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'current_justified_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'finalized_checkpoint':
                    !!map { !!str '$ref': !!str '#/components/schemas/misc_Checkpoint' },
                  !!str 'inactivity_scores':
                    !!map {
                      !!str 'description': !!str 'Per-validator inactivity scores. New in Altair',
                      !!str 'type': !!str 'array',
                      !!str 'maxItems': !!str '1099511627776',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'current_sync_committee':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncCommittee' },
                  !!str 'next_sync_committee':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncCommittee' },
                  !!str 'latest_execution_payload_header':
                    !!map { !!str '$ref': !!str '#/components/schemas/ExecutionPayloadHeader' },
                },
            },
          !!str 'p2p_PeerId':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str "Cryptographic hash of a peer\u2019s public key. [Read\nmore](https://docs.libp2p.io/concepts/peer-id/)",
              !!str 'example': !!str 'QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N',
            },
          !!str 'ENR':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str "Ethereum node record. [Read\nmore](https://eips.ethereum.org/EIPS/eip-778)",
              !!str 'example': !!str 'enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8',
            },
          !!str 'Multiaddr':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)',
              !!str 'example': !!str '/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N',
            },
          !!str 'primitive_Hex':
            !!map { !!str 'type': !!str 'string', !!str 'pattern': !!str '^0x[a-fA-F0-9]{2,}$' },
          !!str 'MetaData':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "Based on eth2 [Metadata\nobject](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/p2p-interface.md#metadata)",
              !!str 'properties':
                !!map {
                  !!str 'seq_number':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map {
                            !!str 'description': !!str "Uint64 starting at 0 used to version the node's metadata. If any\nother field in the local MetaData changes, the node MUST\nincrement seq_number by 1.",
                          },
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                        ],
                    },
                  !!str 'attnets':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map {
                            !!str 'description': !!str "Bitvector representing the node's persistent attestation subnet\nsubscriptions.",
                          },
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Hex' },
                          !!map { !!str 'example': !!str '0x0000000000000000' },
                        ],
                    },
                  !!str 'syncnets':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map {
                            !!str 'description': !!str "Bitvector representing the node's sync committee subnet\nsubscriptions. This metadata is not present in phase0, but will\nbe present in Altair.",
                          },
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Hex' },
                          !!map { !!str 'example': !!str '0x0f' },
                          !!map { !!str 'required': !!str 'false' },
                        ],
                    },
                },
            },
          !!str 'p2p_NetworkIdentity':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'peer_id': !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerId' },
                  !!str 'enr': !!map { !!str '$ref': !!str '#/components/schemas/ENR' },
                  !!str 'p2p_addresses':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/Multiaddr' },
                              !!map {
                                !!str 'description': !!str "Node's addresses on which eth2 rpc requests are served. [Read\nmore](https://docs.libp2p.io/reference/glossary/#multiaddr)",
                              },
                            ],
                        },
                    },
                  !!str 'discovery_addresses':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/Multiaddr' },
                              !!map {
                                !!str 'description': !!str "Node's addresses on which is listening for discv5 requests.\n[Read\nmore](https://docs.libp2p.io/reference/glossary/#multiaddr)",
                              },
                              !!map {
                                !!str 'example': !!str '/ip4/7.7.7.7/udp/30303/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N',
                              },
                            ],
                        },
                    },
                  !!str 'metadata': !!map { !!str '$ref': !!str '#/components/schemas/MetaData' },
                },
            },
          !!str 'p2p_PeerConnectionState':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'enum':
                !!seq [
                  !!str 'disconnected',
                  !!str 'connecting',
                  !!str 'connected',
                  !!str 'disconnecting',
                ],
            },
          !!str 'p2p_PeerConnectionDirection':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'enum': !!seq [!!str 'inbound', !!str 'outbound'],
            },
          !!str 'p2p_Peer':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'peer_id': !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerId' },
                  !!str 'enr':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/ENR' },
                          !!map { !!str 'nullable': !!str 'true' },
                        ],
                    },
                  !!str 'last_seen_p2p_address':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/Multiaddr' },
                          !!map {
                            !!str 'description': !!str 'Multiaddrs used in last peer connection.',
                          },
                        ],
                    },
                  !!str 'state':
                    !!map { !!str '$ref': !!str '#/components/schemas/p2p_PeerConnectionState' },
                  !!str 'direction':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/p2p_PeerConnectionDirection',
                    },
                },
            },
          !!str 'primitive_Version':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'description': !!str "A string which uniquely identifies the client implementation and its\nversion; similar to [HTTP\nUser-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).",
              !!str 'example': !!str 'Lighthouse/v0.1.5 (Linux x86_64)',
            },
          !!str 'primitive_DependentRoot':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                  !!map {
                    !!str 'description': !!str 'The block root that this response is dependent on.',
                  },
                ],
            },
          !!str 'validator_AttesterDuty':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'validator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry',
                          },
                        ],
                    },
                  !!str 'committee_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'The committee index' },
                        ],
                    },
                  !!str 'committee_length':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Number of validators in committee' },
                        ],
                    },
                  !!str 'committees_at_slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Number of committees at the provided slot',
                          },
                        ],
                    },
                  !!str 'validator_committee_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map { !!str 'description': !!str 'Index of validator in committee' },
                        ],
                    },
                  !!str 'slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'The slot at which the validator must attest.',
                          },
                        ],
                    },
                },
            },
          !!str 'validator_ProposerDuty':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'validator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'The slot at which the validator must propose block.',
                          },
                        ],
                    },
                },
            },
          !!str 'SyncDuty':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'pubkey': !!map { !!str '$ref': !!str '#/components/schemas/Pubkey' },
                  !!str 'validator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'validator_sync_committee_indices':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'description': !!str 'The indices of the validator in the sync committee.',
                      !!str 'minItems': !!str '1',
                      !!str 'items':
                        !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                    },
                },
            },
          !!str 'primitive_Graffiti':
            !!map {
              !!str 'type': !!str 'string',
              !!str 'format': !!str 'hex',
              !!str 'example': !!str '0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2',
              !!str 'pattern': !!str '^0x[a-fA-F0-9]{64}$',
            },
          !!str 'Aggregate':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The\n[`AggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/validator.md#aggregateandproof)\nwithout selection_proof",
              !!str 'properties':
                !!map {
                  !!str 'aggregator_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'aggregate':
                    !!map { !!str '$ref': !!str '#/components/schemas/attestation_Attestation' },
                },
            },
          !!str 'AggregateAndProof':
            !!map {
              !!str 'allOf':
                !!seq [
                  !!map { !!str '$ref': !!str '#/components/schemas/Aggregate' },
                  !!map {
                    !!str 'type': !!str 'object',
                    !!str 'properties':
                      !!map {
                        !!str 'selection_proof':
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                      },
                  },
                ],
            },
          !!str 'validator_SignedAggregateAndProof':
            !!map {
              !!str 'description': !!str "The\n[`SignedAggregateAndProof`](https://github.com/ethereum/consensus-specs/blob/v1.0.1/specs/phase0/validator.md#signedaggregateandproof)\nobject",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/AggregateAndProof' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'SyncCommitteeSubscription':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'validator_index':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                  !!str 'sync_committee_indices':
                    !!map {
                      !!str 'type': !!str 'array',
                      !!str 'items':
                        !!map {
                          !!str 'allOf':
                            !!seq [
                              !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                            ],
                        },
                    },
                  !!str 'until_epoch':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str "The final epoch (exclusive value) that the specified validator\nrequires the subscription for.",
                          },
                        ],
                    },
                },
            },
          !!str 'SyncCommitteeContribution':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'slot':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str "The slot at which the validator is providing a sync committee\ncontribution.",
                          },
                        ],
                    },
                  !!str 'beacon_block_root':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Root' },
                          !!map { !!str 'description': !!str 'Block root for this contribution.' },
                        ],
                    },
                  !!str 'subcommittee_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'The index of the subcommittee that the contribution pertains to.',
                          },
                        ],
                    },
                  !!str 'aggregation_bits':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map {
                            !!str 'description': !!str "A bit is set if a signature from the validator at the\ncorresponding index in the subcommittee is present in the\naggregate `signature`.",
                          },
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Hex' },
                          !!map { !!str 'example': !!str '0x01' },
                        ],
                    },
                  !!str 'signature':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                          !!map {
                            !!str 'description': !!str 'Signature by the validator(s) over the block root of `slot`',
                          },
                        ],
                    },
                },
            },
          !!str 'ContributionAndProof':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'aggregator_index':
                    !!map {
                      !!str 'allOf':
                        !!seq [
                          !!map { !!str '$ref': !!str '#/components/schemas/primitive_Uint64' },
                          !!map {
                            !!str 'description': !!str 'Index of validator in validator registry.',
                          },
                        ],
                    },
                  !!str 'selection_proof':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                  !!str 'contribution':
                    !!map { !!str '$ref': !!str '#/components/schemas/SyncCommitteeContribution' },
                },
            },
          !!str 'SignedContributionAndProof':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/ContributionAndProof' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
          !!str 'ValidatorRegistration':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str 'The `ValidatorRegistration` object from the Builder API specification.',
              !!str 'properties':
                !!map {
                  !!str 'fee_recipient':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/primitive_ExecutionAddress',
                      !!str 'description': !!str 'Address to receive fees from the block.',
                    },
                  !!str 'gas_limit':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                      !!str 'description': !!str 'Preferred gas limit of validator.',
                    },
                  !!str 'timestamp':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/primitive_Uint64',
                      !!str 'description': !!str 'Unix timestamp of registration.',
                    },
                  !!str 'pubkey':
                    !!map {
                      !!str '$ref': !!str '#/components/schemas/Pubkey',
                      !!str 'description': !!str 'BLS public key of validator.',
                    },
                },
            },
          !!str 'registration_SignedValidatorRegistration':
            !!map {
              !!str 'type': !!str 'object',
              !!str 'description': !!str "The `SignedValidatorRegistration` object from the Builder API\nspecification.",
              !!str 'properties':
                !!map {
                  !!str 'message':
                    !!map { !!str '$ref': !!str '#/components/schemas/ValidatorRegistration' },
                  !!str 'signature':
                    !!map { !!str '$ref': !!str '#/components/schemas/primitive_Signature' },
                },
            },
        },
      !!str 'parameters':
        !!map {
          !!str 'StateId':
            !!map {
              !!str 'required': !!str 'true',
              !!str 'name': !!str 'state_id',
              !!str 'in': !!str 'path',
              !!str 'example': !!str 'head',
              !!str 'schema': !!map { !!str 'type': !!str 'string' },
              !!str 'description': !!str "State identifier.\n\nCan be one of: \"head\" (canonical head in node's view), \"genesis\",\n\"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x\nprefix\\>.\n",
            },
          !!str 'BlockId':
            !!map {
              !!str 'required': !!str 'true',
              !!str 'name': !!str 'block_id',
              !!str 'in': !!str 'path',
              !!str 'example': !!str 'head',
              !!str 'schema': !!map { !!str 'type': !!str 'string' },
              !!str 'description': !!str "Block identifier.\n\nCan be one of: \"head\" (canonical head in node's view), \"genesis\",\n\"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n",
            },
          !!str 'index_StateId':
            !!map {
              !!str 'required': !!str 'true',
              !!str 'name': !!str 'state_id',
              !!str 'in': !!str 'path',
              !!str 'example': !!str 'head',
              !!str 'schema': !!map { !!str 'type': !!str 'string' },
              !!str 'description': !!str "State identifier.\n\nCan be one of: \"head\" (canonical head in node's view), \"genesis\",\n\"finalized\", \"justified\", \\<slot\\>, \\<hex encoded stateRoot with 0x\nprefix\\>.\n",
            },
          !!str 'index_BlockId':
            !!map {
              !!str 'required': !!str 'true',
              !!str 'name': !!str 'block_id',
              !!str 'in': !!str 'path',
              !!str 'example': !!str 'head',
              !!str 'schema': !!map { !!str 'type': !!str 'string' },
              !!str 'description': !!str "Block identifier.\n\nCan be one of: \"head\" (canonical head in node's view), \"genesis\",\n\"finalized\", \\<slot\\>, \\<hex encoded blockRoot with 0x prefix\\>.\n",
            },
        },
      !!str 'responses':
        !!map {
          !!str 'InvalidRequest':
            !!map {
              !!str 'description': !!str 'Invalid request syntax.',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '400',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                    },
                },
            },
          !!str 'NotFound':
            !!map {
              !!str 'description': !!str 'Not found',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '404',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                      !!str 'example':
                        !!map {
                          !!str 'code': !!str '404',
                          !!str 'message': !!str 'Requested item not found',
                        },
                    },
                },
            },
          !!str 'InternalError':
            !!map {
              !!str 'description': !!str 'Beacon node internal error.',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '404',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                      !!str 'example':
                        !!map {
                          !!str 'code': !!str '500',
                          !!str 'message': !!str 'Internal server error',
                        },
                    },
                },
            },
          !!str 'CurrentlySyncing':
            !!map {
              !!str 'description': !!str 'Beacon node is currently syncing, try again later.',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '404',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                      !!str 'example':
                        !!map {
                          !!str 'code': !!str '503',
                          !!str 'message': !!str "Beacon node is currently syncing and not serving request on that\nendpoint",
                        },
                    },
                },
            },
          !!str 'http_InternalError':
            !!map {
              !!str 'description': !!str 'Beacon node internal error.',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '404',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                      !!str 'example':
                        !!map {
                          !!str 'code': !!str '500',
                          !!str 'message': !!str 'Internal server error',
                        },
                    },
                },
            },
          !!str 'http_CurrentlySyncing':
            !!map {
              !!str 'description': !!str 'Beacon node is currently syncing, try again later.',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '404',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                      !!str 'example':
                        !!map {
                          !!str 'code': !!str '503',
                          !!str 'message': !!str "Beacon node is currently syncing and not serving request on that\nendpoint",
                        },
                    },
                },
            },
          !!str 'http_InvalidRequest':
            !!map {
              !!str 'description': !!str 'Invalid request syntax.',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '400',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                    },
                },
            },
          !!str 'http_NotFound':
            !!map {
              !!str 'description': !!str 'Not found',
              !!str 'content':
                !!map {
                  !!str 'application/json':
                    !!map {
                      !!str 'schema':
                        !!map {
                          !!str 'type': !!str 'object',
                          !!str 'properties':
                            !!map {
                              !!str 'code':
                                !!map {
                                  !!str 'description': !!str "Either specific error code in case of invalid request or http\nstatus code",
                                  !!str 'type': !!str 'number',
                                  !!str 'example': !!str '404',
                                },
                              !!str 'message':
                                !!map {
                                  !!str 'description': !!str 'Message describing error',
                                  !!str 'type': !!str 'string',
                                },
                              !!str 'stacktraces':
                                !!map {
                                  !!str 'description': !!str 'Optional stacktraces, sent when node is in debug mode',
                                  !!str 'type': !!str 'array',
                                  !!str 'items': !!map { !!str 'type': !!str 'string' },
                                },
                            },
                        },
                      !!str 'example':
                        !!map {
                          !!str 'code': !!str '404',
                          !!str 'message': !!str 'Requested item not found',
                        },
                    },
                },
            },
        },
      !!str 'headers':
        !!map {
          !!str 'Eth-Consensus-Version':
            !!map {
              !!str 'description': !!str "Required in response so client can deserialize returned json or ssz data\nmore effectively.",
              !!str 'required': !!str 'true',
              !!str 'schema': !!map { !!str '$ref': !!str '#/components/schemas/ConsensusVersion' },
            },
        },
    },
}
